{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/curl-google-com.md","hash":"e52dfcebbdcef2f3814edb4c3cdd087316b51f64","modified":1501333343419},{"_id":"source/about/index.md","hash":"eb5795fc6e20881838ea4bcf21afc9e2fc56ff98","modified":1500090280723},{"_id":"source/_posts/BaiduMapAPI.md","hash":"cd2039230256273a8fcbb00334b2e2a819378ca2","modified":1500090280707},{"_id":"source/_posts/curl-google-com/google.gif","hash":"187e7a3f9c05e069433d01072c095079d0207612","modified":1501333198868},{"_id":"source/_posts/BaiduMapAPI/baiduMap.jpg","hash":"fa068c3dc442567f2be99f75d1f8b51acfc57ab7","modified":1500090280723},{"_id":"public/content.json","hash":"8ad7b628603e49cbd11b0dc73d3d72d4912e50fd","modified":1501333351142},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/categories/开发工具/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/2017/07/29/curl-google-com/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/archives/2017/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/categories/学习笔记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351142},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/2016/12/08/BaiduMapAPI/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/archives/2016/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/tags/工具/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/tags/百度地图/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/tags/WEB/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501333351157},{"_id":"public/2017/07/29/curl-google-com/google.gif","hash":"187e7a3f9c05e069433d01072c095079d0207612","modified":1501333351173},{"_id":"public/2016/12/08/BaiduMapAPI/baiduMap.jpg","hash":"fa068c3dc442567f2be99f75d1f8b51acfc57ab7","modified":1501333351173}],"Category":[{"name":"学习笔记","_id":"cj5pb42s10001cgomg65wzr2n"},{"name":"开发工具","_id":"cj5pb42tc0007cgomy81m6zpi"}],"Data":[],"Page":[{"title":"","date":"2016-12-08T04:32:01.000Z","_content":"## 一些个人信息","source":"about/index.md","raw":"---\ntitle:\ndate: 2016-12-08 12:32:01\n---\n## 一些个人信息","updated":"2017-07-15T03:44:40.723Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj5pb42sh0005cgom26nvn3bu","content":"<h2 id=\"一些个人信息\"><a href=\"#一些个人信息\" class=\"headerlink\" title=\"一些个人信息\"></a>一些个人信息</h2>","excerpt":"","more":"<h2 id=\"一些个人信息\"><a href=\"#一些个人信息\" class=\"headerlink\" title=\"一些个人信息\"></a>一些个人信息</h2>"}],"Post":[{"title":"浏览器访问google.com后发生了什么？","date":"2017-07-29T12:51:12.000Z","_content":"{% asset_img google.gif google %}\n\n#浏览器输入google.com后发生的事\n\n##\"g\"键按下\n\n接下来的内容介绍了物理键盘和系统中断的工作原理，但是有一部分内容却没有涉及。当你按下“g”键，浏览器接收到这个消息之后，会触发自动完成机制。浏览器根据自己的算法，以及你是否处于隐私浏览模式，会在浏览器的地址框下方给出输入建议。大部分算法会优先考虑根据你的搜索历史和书签等内容给出建议。你打算输入 \"google.com\"，因此给出的建议并不匹配。但是输入过程中仍然有大量的代码在后台运行，你的每一次按键都会使得给出的建议更加准确。甚至有可能在你输入之前，浏览器就将 \"google.com\" 建议给你。\n\n##回车键按下\n\n为了从零开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接地或者通过电容器间接地闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。\n\n###USB键盘：\n\n* 键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压\n* 键码值存储在键盘内部电路一个叫做\"endpoint\"的寄存器内\n* USB控制器大概每隔10ms便查询一次\"endpoint\"以得到存储的键码值数据，这个最短时间间隔由键盘提供\n* 键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包\n* 这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb/s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成\"低速设备\"（USB 2.0 compliance）\n* 这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层\n\n###虚拟键盘（触屏设备）：\n\n* 在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标\n* 然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮\n* 虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息\n* 这个消息又返回来向当前活跃的应用通知一个“按键按下”事件\n\n##产生中断[非USB键盘]\n\n键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数 。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中断处理器，然后操作系统内核出场了。\n\n###(Windows)一个 WM_KEYDOWN 消息被发往应用程序\n\nHID把键盘按下的事件传送给 `KBDHID.sys` 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 `VK_RETURN(0x0d)`。 `KBDHID.sys` 驱动和 `KBDCLASS.sys` (键盘类驱动,keyboard class driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 `Win32K.sys` ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。\n\n`Win32K.sys` 通过 `GetForegroundWindow()` API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的\"message pump\"机制调用 `SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam)` 函数， `lParam` 是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 `VK_RETURN` ），功能键（alt, shift, ctrl）是否被按下（在这里没有），以及一些其他状态。\n\nWindows的 `SendMessage` API直接将消息添加到特定窗口句柄 `hWnd` 的消息队列中，之后赋给 hWnd 的主要消息处理函数 `WindowProc` 将会被调用，用于处理队列中的消息。\n\n当前活跃的句柄 `hWnd` 实际上是一个edit control控件，这种情况下，`WindowProc` 有一个用于处理 `WM_KEYDOWN` 消息的处理器，这段代码会查看 `SendMessage` 传入的第三个参数 `wParam` ，因为这个参数是 `VK_RETURN` ，于是它知道用户按下了回车键。\n\n###(Mac OS X)一个 KeyDown NSEvent被发往应用程序\n\n中断信号引发了I/O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 `WindowServer` 进程。然后， `WindowServer` 将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 `mach_ipc_dispatch` 函数读取到。这个过程通常是由 `NSApplication` 主事件循环产生并且处理的，通过 `NSEventType` 为 `KeyDown` 的 `NSEvent` 。\n\n###(GNU/Linux)Xorg 服务器监听键码值\n\n当使用图形化的 X Server 时，X Server 会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity, i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。\n\n##输入的是 URL 还是搜索的关键字？\n\n当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。\n\n##解析URL\n\n浏览器通过 URL 能够知道下面的信息：\n\n* Protocol \"http\"\n使用HTTP协议\n* Resource \"/\"\n请求的资源是主页(index)\n\n##转换非 ASCII 的 Unicode 字符\n* 浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符\n* 这里主机名是 google.com ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码\n\n##检查 HSTS 列表\n\n* 浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站\n* 如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送\n* 注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。浏览器向网站发出第一个 HTTP 请求之后，网站会返回浏览器一个响应，请求浏览器只使用 HTTPS 发送请求。然而，就是这第一个 HTTP 请求，却可能会使用户受到 downgrade attack 的威胁，这也是为什么现代浏览器都预置了 HSTS 列表。\n\n##DNS 查询\n\n* 浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome://net-internals/#dns）。\n* 如果缓存中没有，就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询。\n* gethostbyname 函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，Hosts 的位置 不同的操作系统有所不同\n* 如果 gethostbyname 没有这个域名的缓存记录，也没有在 hosts 里找到，它将会向 DNS 服务器发送一条 DNS 查询请求。DNS 服务器是由网络通信栈提供的，通常是本地路由器或者 ISP 的缓存 DNS 服务器。\n* 查询本地 DNS 服务器\n* 如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询\n* 如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询\n\n##ARP 过程\n\n要想发送 ARP（地址解析协议）广播，我们需要有一个目标 IP 地址，同时还需要知道用于发送 ARP 广播的接口的 MAC 地址。\n\n* 首先查询 ARP 缓存，如果缓存命中，我们返回结果：目标 IP = MAC\n\n如果缓存没有命中：\n\n* 查看路由表，看看目标 IP 地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。\n* 查询选择的网络接口的 MAC 地址\n* 我们发送一个二层（ OSI 模型 中的数据链路层）ARP 请求：\n\n```\nARP Request:\n\nSender MAC: interface:mac:address:here\nSender IP: interface.ip.goes.here\nTarget MAC: FF:FF:FF:FF:FF:FF (Broadcast)\nTarget IP: target.ip.goes.here\n```\n\n根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：\n\n直连：\n\n* 如果我们和路由器是直接连接的，路由器会返回一个 ARP Reply （见下面）。\n集线器：\n\n* 如果我们连接到一个集线器，集线器会把 ARP 请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 ARP Reply 。\n\n交换机：\n\n* 如果我们连接到了一个交换机，交换机会检查本地 CAM/MAC 表，看看哪个端口有我们要找的那个 MAC 地址，如果没有找到，交换机会向所有其它端口广播这个 ARP 请求。\n* 如果交换机的 MAC/CAM 表中有对应的条目，交换机会向有我们想要查询的 MAC 地址的那个端口发送 ARP 请求\n* 如果路由器也“连接”在其中，它会返回一个 ARP Reply\n\n```\nARP Reply:\n\nSender MAC: target:mac:address:here\nSender IP: target.ip.goes.here\nTarget MAC: interface:mac:address:here\nTarget IP: interface.ip.goes.here\n```\n\n现在我们有了 DNS 服务器或者默认网关的 IP 地址，我们可以继续 DNS 请求了：\n\n* 使用 53 端口向 DNS 服务器发送 UDP 请求包，如果响应包太大，会使用 TCP 协议\n* 如果本地/ISP DNS 服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层 DNS 服务器做查询，直到查询到起始授权机构，如果找到会把结果返回\n\n##使用套接字\n\n当浏览器得到了目标服务器的 IP 地址，以及 URL 中给出来端口号（http 协议默认端口号是 80， https 默认端口号是 443），它会调用系统库函数 socket ，请求一个 TCP流套接字，对应的参数是 AF\\_INET/AF\\_INET6 和 SOCK\\_STREAM 。\n\n* 这个请求首先被交给传输层，在传输层请求被封装成 TCP segment。目标端口会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range)\n* TCP segment 被送往网络层，网络层会在其中再加入一个 IP 头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个TCP packet。\n* 这个 TCP packet 接下来会进入链路层，链路层会在封包中加入 frame头 部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的 MAC 地址。像前面说的一样，如果内核不知道网关的 MAC 地址，它必须进行 ARP 广播来查询其地址。\n\n到了现在，TCP 封包已经准备好了，可以使用下面的方式进行传输：\n\n* 以太网\n* WiFi\n* 蜂窝数据网络\n\n对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个 网络节点 处理。节点的目标地址和源地址将在后面讨论。\n\n大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 网络节点 进行处理。\n\n最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域(autonomous system, 缩写 AS)的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部 time to live (TTL) 域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。\n\n上面的发送和接受过程在 TCP 连接期间会发生很多次：\n\n* 客户端选择一个初始序列号(ISN)，将设置了 SYN 位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号\n* 服务器端接收到 SYN 包，如果它可以建立连接：\n\t* 服务器端选择它自己的初始序列号\n\t* 服务器端设置 SYN 位，表明自己选择了一个初始序列号\n\t* 服务器端把 (客户端ISN + 1) 复制到 ACK 域，并且设置 ACK 位，表明自己接收到了客户端的第一个封包\n* 客户端通过发送下面一个封包来确认这次连接：\n\t* 自己的序列号+1\n\t* 接收端 ACK+1\n\t* 设置 ACK 位\n* 数据通过下面的方式传输：\n\t* 当一方发送了N个 Bytes 的数据之后，将自己的 SEQ 序列号也增加N\n\t* 另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个 ACK 包，ACK 的值设置为接收到的数据包的最后一个序列号\n* 关闭连接时：\n\t* 要关闭连接的一方发送一个 FIN 包\n\t* 另一方确认这个 FIN 包，并且发送自己的 FIN 包\n\t* 要关闭的一方使用 ACK 包来确认接收到了 FIN\n\n##TLS 握手\n\n* 客户端发送一个 ClientHello 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。\n* 服务器端向客户端返回一个 ServerHello 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥\n* 客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥\n* 服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥\n* 客户端发送一个 Finished 消息给服务器端，使用对称密钥加密这次通讯的一个散列值\n* 服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 Finished 消息，也使用协商好的对称密钥加密\n* 从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容\n\n##HTTP 协议\n\n如果浏览器是 Google 出品的，它不会使用 HTTP 协议来获取页面信息，而是会与服务器端发送请求，商讨使用 SPDY 协议。\n\n如果浏览器使用 HTTP 协议而不支持 SPDY 协议，它会向服务器发送这样的一个请求:\n\n```\nGET / HTTP/1.1\nHost: google.com\nConnection: close\n[其他头部]\n```\n“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。（这里我们假设浏览器没有违反HTTP协议标准的bug，同时假设浏览器使用 HTTP/1.1 协议，不然的话头部可能不包含 Host 字段，同时 GET 请求中的版本号会变成 HTTP/1.0 或者 HTTP/0.9 。）\n\nHTTP/1.1 定义了“关闭连接”的选项 \"close\"，发送者使用这个选项指示这次连接在响应结束之后会断开。例如：\n>Connection:close\n\n不支持持久连接的 HTTP/1.1 应用必须在每条消息中都包含 \"close\" 选项。\n\n在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。\n\n服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:\n\n```\n200 OK\n[响应头部]\n```\n\n然后是一个换行，接下来有效载荷(payload)，也就是 `www.google.com` 的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供之后的请求重用。\n\n如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部），以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:\n\n```\n304 Not Modified\n[响应头部]\n```\n\n这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。\n\n在解析完 HTML 之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 `GET / HTTP/1.1` 会变成 `GET /$(相对www.google.com的URL) HTTP/1.1` 。\n\n如果HTML引入了 `www.google.com` 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 `Host` 头部会变成另外的域名。\n##HTTP 服务器请求处理\n\nHTTPD(HTTP Daemon)在服务器端处理请求/响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。\n\n* HTTPD 接收请求\n* 服务器把请求拆分为以下几个参数：\n\t* HTTP 请求方法(GET, POST, HEAD, PUT, DELETE, CONNECT, OPTIONS, 或者 TRACE)。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法\n\t* 域名：google.com\n\t* 请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)\n* 服务器验证其上已经配置了 google.com 的虚拟主机\n* 服务器验证 google.com 接受 GET 方法\n* 服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)\n* 如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求\n* 服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 \"/\" ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。\n* 服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者\n\n##浏览器背后的故事\n\n当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：\n\n* 解析 —— HTML，CSS，JS\n* 渲染 —— 构建 DOM 树 -> 渲染 -> 布局 -> 绘制\n\n##浏览器\n\n浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource Identifier) 来确定。\n\n浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。\n\n不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：\n\n* 一个地址栏\n* 后退和前进按钮\n* 书签选项\n* 刷新和停止按钮\n* 主页按钮\n\n**浏览器高层架构**\n\n组成浏览器的组件有：\n\n* **用户界面** 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分\n* **浏览器引擎** 浏览器引擎负责让 UI 和渲染引擎协调工作\n* **渲染引擎** 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上\n* **网络组件** 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现\n* **UI后端** UI 后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现\n* **Javascript** 引擎 Javascript 引擎用于解析和执行 Javascript 代码\n* **数据存储** 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL 和 FileSystem 之类的存储机制\n\n##HTML 解析\n\n浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成8kB大小的分块传输。\n\nHTML 解析器的主要工作是对 HTML 文档进行解析，生成解析树。\n\n解析树是以 DOM 元素以及属性为节点的树。DOM是文档对象模型(Document Object Model)的缩写，它是 HTML 文档的对象表示，同时也是 HTML 元素面向外部(如Javascript)的接口。树的根部是\"Document\"对象。整个 DOM 和 HTML 文档几乎是一对一的关系。\n\n**解析算法**\n\nHTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:\n\n* 语言本身的“宽容”特性\n* HTML 本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们\n* 解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于 HTML 来说，动态代码，例如脚本元素中包含的 document.write() 方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容\n\n由于不能使用常用的解析技术，浏览器创造了专门用于解析 HTML 的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。\n\n**解析结束之后**\n\n浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。\n\n此时浏览器把文档标记为可交互的（interactive），浏览器开始解析处于“推迟（deferred）”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成（complete）”，浏览器会触发“加载（load）”事件。\n\n注意解析 HTML 网页时永远不会出现“无效语法（Invalid Syntax）”错误，浏览器会修复所有错误内容，然后继续解析。\n\n##CSS 解析\n\n* 根据 CSS词法和句法 分析CSS文件和 <style> 标签包含的内容以及 style 属性的值\n* 每个CSS文件都被解析成一个样式表对象（StyleSheet object），这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象\n* CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器\n\n##页面渲染\n\n* 通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值\n* 通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算\"Frame 树\"中每个节点的首选(preferred)宽度\n* 通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度\n* 通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度\n* 使用上面的计算结果构建每个节点的坐标\n* 当存在元素使用 floated，位置有 absolutely 或 relatively 属性的时候，会有更多复杂的计算，详见http://dev.w3.org/csswg/css2/ 和 http://www.w3.org/Style/CSS/current-work\n* 创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层\n* 页面上的每个层都被分配了纹理(?)\n* 每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制\n* 上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量\n* 计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。\n\n##GPU 渲染\n\n* 在渲染过程中，图形处理层可能使用通用用途的 CPU，也可能使用图形处理器 GPU\n* 当使用 GPU 用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用 GPU 强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。\n\n##Window Server\n\n##后期渲染与用户引发的处理\n\n渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google Doodle动画)或与用户交互(在搜索栏输入关键字获得搜索建议)。类似Flash和Java的插件也会运行，尽管Google主页里没有。这些脚本可以触发网络请求，也可能改变网页的内容和布局，产生又一轮渲染与绘制。\n","source":"_posts/curl-google-com.md","raw":"---\ntitle: 浏览器访问google.com后发生了什么？\ndate: 2017-07-29 20:51:12\ntags:\n- WEB\ncategories:\n- 学习笔记\n---\n{% asset_img google.gif google %}\n\n#浏览器输入google.com后发生的事\n\n##\"g\"键按下\n\n接下来的内容介绍了物理键盘和系统中断的工作原理，但是有一部分内容却没有涉及。当你按下“g”键，浏览器接收到这个消息之后，会触发自动完成机制。浏览器根据自己的算法，以及你是否处于隐私浏览模式，会在浏览器的地址框下方给出输入建议。大部分算法会优先考虑根据你的搜索历史和书签等内容给出建议。你打算输入 \"google.com\"，因此给出的建议并不匹配。但是输入过程中仍然有大量的代码在后台运行，你的每一次按键都会使得给出的建议更加准确。甚至有可能在你输入之前，浏览器就将 \"google.com\" 建议给你。\n\n##回车键按下\n\n为了从零开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接地或者通过电容器间接地闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。\n\n###USB键盘：\n\n* 键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压\n* 键码值存储在键盘内部电路一个叫做\"endpoint\"的寄存器内\n* USB控制器大概每隔10ms便查询一次\"endpoint\"以得到存储的键码值数据，这个最短时间间隔由键盘提供\n* 键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包\n* 这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb/s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成\"低速设备\"（USB 2.0 compliance）\n* 这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层\n\n###虚拟键盘（触屏设备）：\n\n* 在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标\n* 然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮\n* 虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息\n* 这个消息又返回来向当前活跃的应用通知一个“按键按下”事件\n\n##产生中断[非USB键盘]\n\n键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数 。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中断处理器，然后操作系统内核出场了。\n\n###(Windows)一个 WM_KEYDOWN 消息被发往应用程序\n\nHID把键盘按下的事件传送给 `KBDHID.sys` 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 `VK_RETURN(0x0d)`。 `KBDHID.sys` 驱动和 `KBDCLASS.sys` (键盘类驱动,keyboard class driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 `Win32K.sys` ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。\n\n`Win32K.sys` 通过 `GetForegroundWindow()` API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的\"message pump\"机制调用 `SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam)` 函数， `lParam` 是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 `VK_RETURN` ），功能键（alt, shift, ctrl）是否被按下（在这里没有），以及一些其他状态。\n\nWindows的 `SendMessage` API直接将消息添加到特定窗口句柄 `hWnd` 的消息队列中，之后赋给 hWnd 的主要消息处理函数 `WindowProc` 将会被调用，用于处理队列中的消息。\n\n当前活跃的句柄 `hWnd` 实际上是一个edit control控件，这种情况下，`WindowProc` 有一个用于处理 `WM_KEYDOWN` 消息的处理器，这段代码会查看 `SendMessage` 传入的第三个参数 `wParam` ，因为这个参数是 `VK_RETURN` ，于是它知道用户按下了回车键。\n\n###(Mac OS X)一个 KeyDown NSEvent被发往应用程序\n\n中断信号引发了I/O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 `WindowServer` 进程。然后， `WindowServer` 将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 `mach_ipc_dispatch` 函数读取到。这个过程通常是由 `NSApplication` 主事件循环产生并且处理的，通过 `NSEventType` 为 `KeyDown` 的 `NSEvent` 。\n\n###(GNU/Linux)Xorg 服务器监听键码值\n\n当使用图形化的 X Server 时，X Server 会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity, i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。\n\n##输入的是 URL 还是搜索的关键字？\n\n当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。\n\n##解析URL\n\n浏览器通过 URL 能够知道下面的信息：\n\n* Protocol \"http\"\n使用HTTP协议\n* Resource \"/\"\n请求的资源是主页(index)\n\n##转换非 ASCII 的 Unicode 字符\n* 浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符\n* 这里主机名是 google.com ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码\n\n##检查 HSTS 列表\n\n* 浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站\n* 如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送\n* 注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。浏览器向网站发出第一个 HTTP 请求之后，网站会返回浏览器一个响应，请求浏览器只使用 HTTPS 发送请求。然而，就是这第一个 HTTP 请求，却可能会使用户受到 downgrade attack 的威胁，这也是为什么现代浏览器都预置了 HSTS 列表。\n\n##DNS 查询\n\n* 浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome://net-internals/#dns）。\n* 如果缓存中没有，就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询。\n* gethostbyname 函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，Hosts 的位置 不同的操作系统有所不同\n* 如果 gethostbyname 没有这个域名的缓存记录，也没有在 hosts 里找到，它将会向 DNS 服务器发送一条 DNS 查询请求。DNS 服务器是由网络通信栈提供的，通常是本地路由器或者 ISP 的缓存 DNS 服务器。\n* 查询本地 DNS 服务器\n* 如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询\n* 如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询\n\n##ARP 过程\n\n要想发送 ARP（地址解析协议）广播，我们需要有一个目标 IP 地址，同时还需要知道用于发送 ARP 广播的接口的 MAC 地址。\n\n* 首先查询 ARP 缓存，如果缓存命中，我们返回结果：目标 IP = MAC\n\n如果缓存没有命中：\n\n* 查看路由表，看看目标 IP 地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。\n* 查询选择的网络接口的 MAC 地址\n* 我们发送一个二层（ OSI 模型 中的数据链路层）ARP 请求：\n\n```\nARP Request:\n\nSender MAC: interface:mac:address:here\nSender IP: interface.ip.goes.here\nTarget MAC: FF:FF:FF:FF:FF:FF (Broadcast)\nTarget IP: target.ip.goes.here\n```\n\n根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：\n\n直连：\n\n* 如果我们和路由器是直接连接的，路由器会返回一个 ARP Reply （见下面）。\n集线器：\n\n* 如果我们连接到一个集线器，集线器会把 ARP 请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 ARP Reply 。\n\n交换机：\n\n* 如果我们连接到了一个交换机，交换机会检查本地 CAM/MAC 表，看看哪个端口有我们要找的那个 MAC 地址，如果没有找到，交换机会向所有其它端口广播这个 ARP 请求。\n* 如果交换机的 MAC/CAM 表中有对应的条目，交换机会向有我们想要查询的 MAC 地址的那个端口发送 ARP 请求\n* 如果路由器也“连接”在其中，它会返回一个 ARP Reply\n\n```\nARP Reply:\n\nSender MAC: target:mac:address:here\nSender IP: target.ip.goes.here\nTarget MAC: interface:mac:address:here\nTarget IP: interface.ip.goes.here\n```\n\n现在我们有了 DNS 服务器或者默认网关的 IP 地址，我们可以继续 DNS 请求了：\n\n* 使用 53 端口向 DNS 服务器发送 UDP 请求包，如果响应包太大，会使用 TCP 协议\n* 如果本地/ISP DNS 服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层 DNS 服务器做查询，直到查询到起始授权机构，如果找到会把结果返回\n\n##使用套接字\n\n当浏览器得到了目标服务器的 IP 地址，以及 URL 中给出来端口号（http 协议默认端口号是 80， https 默认端口号是 443），它会调用系统库函数 socket ，请求一个 TCP流套接字，对应的参数是 AF\\_INET/AF\\_INET6 和 SOCK\\_STREAM 。\n\n* 这个请求首先被交给传输层，在传输层请求被封装成 TCP segment。目标端口会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range)\n* TCP segment 被送往网络层，网络层会在其中再加入一个 IP 头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个TCP packet。\n* 这个 TCP packet 接下来会进入链路层，链路层会在封包中加入 frame头 部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的 MAC 地址。像前面说的一样，如果内核不知道网关的 MAC 地址，它必须进行 ARP 广播来查询其地址。\n\n到了现在，TCP 封包已经准备好了，可以使用下面的方式进行传输：\n\n* 以太网\n* WiFi\n* 蜂窝数据网络\n\n对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个 网络节点 处理。节点的目标地址和源地址将在后面讨论。\n\n大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 网络节点 进行处理。\n\n最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域(autonomous system, 缩写 AS)的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部 time to live (TTL) 域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。\n\n上面的发送和接受过程在 TCP 连接期间会发生很多次：\n\n* 客户端选择一个初始序列号(ISN)，将设置了 SYN 位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号\n* 服务器端接收到 SYN 包，如果它可以建立连接：\n\t* 服务器端选择它自己的初始序列号\n\t* 服务器端设置 SYN 位，表明自己选择了一个初始序列号\n\t* 服务器端把 (客户端ISN + 1) 复制到 ACK 域，并且设置 ACK 位，表明自己接收到了客户端的第一个封包\n* 客户端通过发送下面一个封包来确认这次连接：\n\t* 自己的序列号+1\n\t* 接收端 ACK+1\n\t* 设置 ACK 位\n* 数据通过下面的方式传输：\n\t* 当一方发送了N个 Bytes 的数据之后，将自己的 SEQ 序列号也增加N\n\t* 另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个 ACK 包，ACK 的值设置为接收到的数据包的最后一个序列号\n* 关闭连接时：\n\t* 要关闭连接的一方发送一个 FIN 包\n\t* 另一方确认这个 FIN 包，并且发送自己的 FIN 包\n\t* 要关闭的一方使用 ACK 包来确认接收到了 FIN\n\n##TLS 握手\n\n* 客户端发送一个 ClientHello 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。\n* 服务器端向客户端返回一个 ServerHello 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥\n* 客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥\n* 服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥\n* 客户端发送一个 Finished 消息给服务器端，使用对称密钥加密这次通讯的一个散列值\n* 服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 Finished 消息，也使用协商好的对称密钥加密\n* 从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容\n\n##HTTP 协议\n\n如果浏览器是 Google 出品的，它不会使用 HTTP 协议来获取页面信息，而是会与服务器端发送请求，商讨使用 SPDY 协议。\n\n如果浏览器使用 HTTP 协议而不支持 SPDY 协议，它会向服务器发送这样的一个请求:\n\n```\nGET / HTTP/1.1\nHost: google.com\nConnection: close\n[其他头部]\n```\n“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。（这里我们假设浏览器没有违反HTTP协议标准的bug，同时假设浏览器使用 HTTP/1.1 协议，不然的话头部可能不包含 Host 字段，同时 GET 请求中的版本号会变成 HTTP/1.0 或者 HTTP/0.9 。）\n\nHTTP/1.1 定义了“关闭连接”的选项 \"close\"，发送者使用这个选项指示这次连接在响应结束之后会断开。例如：\n>Connection:close\n\n不支持持久连接的 HTTP/1.1 应用必须在每条消息中都包含 \"close\" 选项。\n\n在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。\n\n服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:\n\n```\n200 OK\n[响应头部]\n```\n\n然后是一个换行，接下来有效载荷(payload)，也就是 `www.google.com` 的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供之后的请求重用。\n\n如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部），以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:\n\n```\n304 Not Modified\n[响应头部]\n```\n\n这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。\n\n在解析完 HTML 之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 `GET / HTTP/1.1` 会变成 `GET /$(相对www.google.com的URL) HTTP/1.1` 。\n\n如果HTML引入了 `www.google.com` 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 `Host` 头部会变成另外的域名。\n##HTTP 服务器请求处理\n\nHTTPD(HTTP Daemon)在服务器端处理请求/响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。\n\n* HTTPD 接收请求\n* 服务器把请求拆分为以下几个参数：\n\t* HTTP 请求方法(GET, POST, HEAD, PUT, DELETE, CONNECT, OPTIONS, 或者 TRACE)。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法\n\t* 域名：google.com\n\t* 请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)\n* 服务器验证其上已经配置了 google.com 的虚拟主机\n* 服务器验证 google.com 接受 GET 方法\n* 服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)\n* 如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求\n* 服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 \"/\" ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。\n* 服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者\n\n##浏览器背后的故事\n\n当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：\n\n* 解析 —— HTML，CSS，JS\n* 渲染 —— 构建 DOM 树 -> 渲染 -> 布局 -> 绘制\n\n##浏览器\n\n浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource Identifier) 来确定。\n\n浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。\n\n不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：\n\n* 一个地址栏\n* 后退和前进按钮\n* 书签选项\n* 刷新和停止按钮\n* 主页按钮\n\n**浏览器高层架构**\n\n组成浏览器的组件有：\n\n* **用户界面** 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分\n* **浏览器引擎** 浏览器引擎负责让 UI 和渲染引擎协调工作\n* **渲染引擎** 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上\n* **网络组件** 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现\n* **UI后端** UI 后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现\n* **Javascript** 引擎 Javascript 引擎用于解析和执行 Javascript 代码\n* **数据存储** 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL 和 FileSystem 之类的存储机制\n\n##HTML 解析\n\n浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成8kB大小的分块传输。\n\nHTML 解析器的主要工作是对 HTML 文档进行解析，生成解析树。\n\n解析树是以 DOM 元素以及属性为节点的树。DOM是文档对象模型(Document Object Model)的缩写，它是 HTML 文档的对象表示，同时也是 HTML 元素面向外部(如Javascript)的接口。树的根部是\"Document\"对象。整个 DOM 和 HTML 文档几乎是一对一的关系。\n\n**解析算法**\n\nHTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:\n\n* 语言本身的“宽容”特性\n* HTML 本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们\n* 解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于 HTML 来说，动态代码，例如脚本元素中包含的 document.write() 方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容\n\n由于不能使用常用的解析技术，浏览器创造了专门用于解析 HTML 的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。\n\n**解析结束之后**\n\n浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。\n\n此时浏览器把文档标记为可交互的（interactive），浏览器开始解析处于“推迟（deferred）”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成（complete）”，浏览器会触发“加载（load）”事件。\n\n注意解析 HTML 网页时永远不会出现“无效语法（Invalid Syntax）”错误，浏览器会修复所有错误内容，然后继续解析。\n\n##CSS 解析\n\n* 根据 CSS词法和句法 分析CSS文件和 <style> 标签包含的内容以及 style 属性的值\n* 每个CSS文件都被解析成一个样式表对象（StyleSheet object），这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象\n* CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器\n\n##页面渲染\n\n* 通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值\n* 通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算\"Frame 树\"中每个节点的首选(preferred)宽度\n* 通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度\n* 通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度\n* 使用上面的计算结果构建每个节点的坐标\n* 当存在元素使用 floated，位置有 absolutely 或 relatively 属性的时候，会有更多复杂的计算，详见http://dev.w3.org/csswg/css2/ 和 http://www.w3.org/Style/CSS/current-work\n* 创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层\n* 页面上的每个层都被分配了纹理(?)\n* 每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制\n* 上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量\n* 计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。\n\n##GPU 渲染\n\n* 在渲染过程中，图形处理层可能使用通用用途的 CPU，也可能使用图形处理器 GPU\n* 当使用 GPU 用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用 GPU 强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。\n\n##Window Server\n\n##后期渲染与用户引发的处理\n\n渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google Doodle动画)或与用户交互(在搜索栏输入关键字获得搜索建议)。类似Flash和Java的插件也会运行，尽管Google主页里没有。这些脚本可以触发网络请求，也可能改变网页的内容和布局，产生又一轮渲染与绘制。\n","slug":"curl-google-com","published":1,"updated":"2017-07-29T13:02:23.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5pb42s10000cgom0op6to75","content":"<img src=\"/2017/07/29/curl-google-com/google.gif\" alt=\"google\" title=\"google\">\n<p>#浏览器输入google.com后发生的事</p>\n<p>##”g”键按下</p>\n<p>接下来的内容介绍了物理键盘和系统中断的工作原理，但是有一部分内容却没有涉及。当你按下“g”键，浏览器接收到这个消息之后，会触发自动完成机制。浏览器根据自己的算法，以及你是否处于隐私浏览模式，会在浏览器的地址框下方给出输入建议。大部分算法会优先考虑根据你的搜索历史和书签等内容给出建议。你打算输入 “google.com”，因此给出的建议并不匹配。但是输入过程中仍然有大量的代码在后台运行，你的每一次按键都会使得给出的建议更加准确。甚至有可能在你输入之前，浏览器就将 “google.com” 建议给你。</p>\n<p>##回车键按下</p>\n<p>为了从零开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接地或者通过电容器间接地闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。</p>\n<p>###USB键盘：</p>\n<ul>\n<li>键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压</li>\n<li>键码值存储在键盘内部电路一个叫做”endpoint”的寄存器内</li>\n<li>USB控制器大概每隔10ms便查询一次”endpoint”以得到存储的键码值数据，这个最短时间间隔由键盘提供</li>\n<li>键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包</li>\n<li>这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb/s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成”低速设备”（USB 2.0 compliance）</li>\n<li>这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层</li>\n</ul>\n<p>###虚拟键盘（触屏设备）：</p>\n<ul>\n<li>在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标</li>\n<li>然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮</li>\n<li>虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息</li>\n<li>这个消息又返回来向当前活跃的应用通知一个“按键按下”事件</li>\n</ul>\n<p>##产生中断[非USB键盘]</p>\n<p>键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数 。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中断处理器，然后操作系统内核出场了。</p>\n<p>###(Windows)一个 WM_KEYDOWN 消息被发往应用程序</p>\n<p>HID把键盘按下的事件传送给 <code>KBDHID.sys</code> 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 <code>VK_RETURN(0x0d)</code>。 <code>KBDHID.sys</code> 驱动和 <code>KBDCLASS.sys</code> (键盘类驱动,keyboard class driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 <code>Win32K.sys</code> ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。</p>\n<p><code>Win32K.sys</code> 通过 <code>GetForegroundWindow()</code> API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的”message pump”机制调用 <code>SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam)</code> 函数， <code>lParam</code> 是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 <code>VK_RETURN</code> ），功能键（alt, shift, ctrl）是否被按下（在这里没有），以及一些其他状态。</p>\n<p>Windows的 <code>SendMessage</code> API直接将消息添加到特定窗口句柄 <code>hWnd</code> 的消息队列中，之后赋给 hWnd 的主要消息处理函数 <code>WindowProc</code> 将会被调用，用于处理队列中的消息。</p>\n<p>当前活跃的句柄 <code>hWnd</code> 实际上是一个edit control控件，这种情况下，<code>WindowProc</code> 有一个用于处理 <code>WM_KEYDOWN</code> 消息的处理器，这段代码会查看 <code>SendMessage</code> 传入的第三个参数 <code>wParam</code> ，因为这个参数是 <code>VK_RETURN</code> ，于是它知道用户按下了回车键。</p>\n<p>###(Mac OS X)一个 KeyDown NSEvent被发往应用程序</p>\n<p>中断信号引发了I/O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 <code>WindowServer</code> 进程。然后， <code>WindowServer</code> 将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 <code>mach_ipc_dispatch</code> 函数读取到。这个过程通常是由 <code>NSApplication</code> 主事件循环产生并且处理的，通过 <code>NSEventType</code> 为 <code>KeyDown</code> 的 <code>NSEvent</code> 。</p>\n<p>###(GNU/Linux)Xorg 服务器监听键码值</p>\n<p>当使用图形化的 X Server 时，X Server 会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity, i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。</p>\n<p>##输入的是 URL 还是搜索的关键字？</p>\n<p>当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。</p>\n<p>##解析URL</p>\n<p>浏览器通过 URL 能够知道下面的信息：</p>\n<ul>\n<li>Protocol “http”<br>使用HTTP协议</li>\n<li>Resource “/“<br>请求的资源是主页(index)</li>\n</ul>\n<p>##转换非 ASCII 的 Unicode 字符</p>\n<ul>\n<li>浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符</li>\n<li>这里主机名是 google.com ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码</li>\n</ul>\n<p>##检查 HSTS 列表</p>\n<ul>\n<li>浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站</li>\n<li>如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送</li>\n<li>注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。浏览器向网站发出第一个 HTTP 请求之后，网站会返回浏览器一个响应，请求浏览器只使用 HTTPS 发送请求。然而，就是这第一个 HTTP 请求，却可能会使用户受到 downgrade attack 的威胁，这也是为什么现代浏览器都预置了 HSTS 列表。</li>\n</ul>\n<p>##DNS 查询</p>\n<ul>\n<li>浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome://net-internals/#dns）。</li>\n<li>如果缓存中没有，就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询。</li>\n<li>gethostbyname 函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，Hosts 的位置 不同的操作系统有所不同</li>\n<li>如果 gethostbyname 没有这个域名的缓存记录，也没有在 hosts 里找到，它将会向 DNS 服务器发送一条 DNS 查询请求。DNS 服务器是由网络通信栈提供的，通常是本地路由器或者 ISP 的缓存 DNS 服务器。</li>\n<li>查询本地 DNS 服务器</li>\n<li>如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询</li>\n<li>如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询</li>\n</ul>\n<p>##ARP 过程</p>\n<p>要想发送 ARP（地址解析协议）广播，我们需要有一个目标 IP 地址，同时还需要知道用于发送 ARP 广播的接口的 MAC 地址。</p>\n<ul>\n<li>首先查询 ARP 缓存，如果缓存命中，我们返回结果：目标 IP = MAC</li>\n</ul>\n<p>如果缓存没有命中：</p>\n<ul>\n<li>查看路由表，看看目标 IP 地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。</li>\n<li>查询选择的网络接口的 MAC 地址</li>\n<li>我们发送一个二层（ OSI 模型 中的数据链路层）ARP 请求：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ARP Request:</div><div class=\"line\"></div><div class=\"line\">Sender MAC: interface:mac:address:here</div><div class=\"line\">Sender IP: interface.ip.goes.here</div><div class=\"line\">Target MAC: FF:FF:FF:FF:FF:FF (Broadcast)</div><div class=\"line\">Target IP: target.ip.goes.here</div></pre></td></tr></table></figure>\n<p>根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：</p>\n<p>直连：</p>\n<ul>\n<li><p>如果我们和路由器是直接连接的，路由器会返回一个 ARP Reply （见下面）。<br>集线器：</p>\n</li>\n<li><p>如果我们连接到一个集线器，集线器会把 ARP 请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 ARP Reply 。</p>\n</li>\n</ul>\n<p>交换机：</p>\n<ul>\n<li>如果我们连接到了一个交换机，交换机会检查本地 CAM/MAC 表，看看哪个端口有我们要找的那个 MAC 地址，如果没有找到，交换机会向所有其它端口广播这个 ARP 请求。</li>\n<li>如果交换机的 MAC/CAM 表中有对应的条目，交换机会向有我们想要查询的 MAC 地址的那个端口发送 ARP 请求</li>\n<li>如果路由器也“连接”在其中，它会返回一个 ARP Reply</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ARP Reply:</div><div class=\"line\"></div><div class=\"line\">Sender MAC: target:mac:address:here</div><div class=\"line\">Sender IP: target.ip.goes.here</div><div class=\"line\">Target MAC: interface:mac:address:here</div><div class=\"line\">Target IP: interface.ip.goes.here</div></pre></td></tr></table></figure>\n<p>现在我们有了 DNS 服务器或者默认网关的 IP 地址，我们可以继续 DNS 请求了：</p>\n<ul>\n<li>使用 53 端口向 DNS 服务器发送 UDP 请求包，如果响应包太大，会使用 TCP 协议</li>\n<li>如果本地/ISP DNS 服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层 DNS 服务器做查询，直到查询到起始授权机构，如果找到会把结果返回</li>\n</ul>\n<p>##使用套接字</p>\n<p>当浏览器得到了目标服务器的 IP 地址，以及 URL 中给出来端口号（http 协议默认端口号是 80， https 默认端口号是 443），它会调用系统库函数 socket ，请求一个 TCP流套接字，对应的参数是 AF_INET/AF_INET6 和 SOCK_STREAM 。</p>\n<ul>\n<li>这个请求首先被交给传输层，在传输层请求被封装成 TCP segment。目标端口会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range)</li>\n<li>TCP segment 被送往网络层，网络层会在其中再加入一个 IP 头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个TCP packet。</li>\n<li>这个 TCP packet 接下来会进入链路层，链路层会在封包中加入 frame头 部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的 MAC 地址。像前面说的一样，如果内核不知道网关的 MAC 地址，它必须进行 ARP 广播来查询其地址。</li>\n</ul>\n<p>到了现在，TCP 封包已经准备好了，可以使用下面的方式进行传输：</p>\n<ul>\n<li>以太网</li>\n<li>WiFi</li>\n<li>蜂窝数据网络</li>\n</ul>\n<p>对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个 网络节点 处理。节点的目标地址和源地址将在后面讨论。</p>\n<p>大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 网络节点 进行处理。</p>\n<p>最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域(autonomous system, 缩写 AS)的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部 time to live (TTL) 域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。</p>\n<p>上面的发送和接受过程在 TCP 连接期间会发生很多次：</p>\n<ul>\n<li>客户端选择一个初始序列号(ISN)，将设置了 SYN 位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号</li>\n<li>服务器端接收到 SYN 包，如果它可以建立连接：<ul>\n<li>服务器端选择它自己的初始序列号</li>\n<li>服务器端设置 SYN 位，表明自己选择了一个初始序列号</li>\n<li>服务器端把 (客户端ISN + 1) 复制到 ACK 域，并且设置 ACK 位，表明自己接收到了客户端的第一个封包</li>\n</ul>\n</li>\n<li>客户端通过发送下面一个封包来确认这次连接：<ul>\n<li>自己的序列号+1</li>\n<li>接收端 ACK+1</li>\n<li>设置 ACK 位</li>\n</ul>\n</li>\n<li>数据通过下面的方式传输：<ul>\n<li>当一方发送了N个 Bytes 的数据之后，将自己的 SEQ 序列号也增加N</li>\n<li>另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个 ACK 包，ACK 的值设置为接收到的数据包的最后一个序列号</li>\n</ul>\n</li>\n<li>关闭连接时：<ul>\n<li>要关闭连接的一方发送一个 FIN 包</li>\n<li>另一方确认这个 FIN 包，并且发送自己的 FIN 包</li>\n<li>要关闭的一方使用 ACK 包来确认接收到了 FIN</li>\n</ul>\n</li>\n</ul>\n<p>##TLS 握手</p>\n<ul>\n<li>客户端发送一个 ClientHello 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。</li>\n<li>服务器端向客户端返回一个 ServerHello 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥</li>\n<li>客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥</li>\n<li>服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥</li>\n<li>客户端发送一个 Finished 消息给服务器端，使用对称密钥加密这次通讯的一个散列值</li>\n<li>服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 Finished 消息，也使用协商好的对称密钥加密</li>\n<li>从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容</li>\n</ul>\n<p>##HTTP 协议</p>\n<p>如果浏览器是 Google 出品的，它不会使用 HTTP 协议来获取页面信息，而是会与服务器端发送请求，商讨使用 SPDY 协议。</p>\n<p>如果浏览器使用 HTTP 协议而不支持 SPDY 协议，它会向服务器发送这样的一个请求:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET / HTTP/1.1</div><div class=\"line\">Host: google.com</div><div class=\"line\">Connection: close</div><div class=\"line\">[其他头部]</div></pre></td></tr></table></figure>\n<p>“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。（这里我们假设浏览器没有违反HTTP协议标准的bug，同时假设浏览器使用 HTTP/1.1 协议，不然的话头部可能不包含 Host 字段，同时 GET 请求中的版本号会变成 HTTP/1.0 或者 HTTP/0.9 。）</p>\n<p>HTTP/1.1 定义了“关闭连接”的选项 “close”，发送者使用这个选项指示这次连接在响应结束之后会断开。例如：</p>\n<blockquote>\n<p>Connection:close</p>\n</blockquote>\n<p>不支持持久连接的 HTTP/1.1 应用必须在每条消息中都包含 “close” 选项。</p>\n<p>在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。</p>\n<p>服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">200 OK</div><div class=\"line\">[响应头部]</div></pre></td></tr></table></figure>\n<p>然后是一个换行，接下来有效载荷(payload)，也就是 <code>www.google.com</code> 的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供之后的请求重用。</p>\n<p>如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部），以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">304 Not Modified</div><div class=\"line\">[响应头部]</div></pre></td></tr></table></figure>\n<p>这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。</p>\n<p>在解析完 HTML 之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 <code>GET / HTTP/1.1</code> 会变成 <code>GET /$(相对www.google.com的URL) HTTP/1.1</code> 。</p>\n<p>如果HTML引入了 <code>www.google.com</code> 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 <code>Host</code> 头部会变成另外的域名。</p>\n<p>##HTTP 服务器请求处理</p>\n<p>HTTPD(HTTP Daemon)在服务器端处理请求/响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。</p>\n<ul>\n<li>HTTPD 接收请求</li>\n<li>服务器把请求拆分为以下几个参数：<ul>\n<li>HTTP 请求方法(GET, POST, HEAD, PUT, DELETE, CONNECT, OPTIONS, 或者 TRACE)。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法</li>\n<li>域名：google.com</li>\n<li>请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)</li>\n</ul>\n</li>\n<li>服务器验证其上已经配置了 google.com 的虚拟主机</li>\n<li>服务器验证 google.com 接受 GET 方法</li>\n<li>服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)</li>\n<li>如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求</li>\n<li>服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 “/“ ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。</li>\n<li>服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者</li>\n</ul>\n<p>##浏览器背后的故事</p>\n<p>当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：</p>\n<ul>\n<li>解析 —— HTML，CSS，JS</li>\n<li>渲染 —— 构建 DOM 树 -&gt; 渲染 -&gt; 布局 -&gt; 绘制</li>\n</ul>\n<p>##浏览器</p>\n<p>浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource Identifier) 来确定。</p>\n<p>浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。</p>\n<p>不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：</p>\n<ul>\n<li>一个地址栏</li>\n<li>后退和前进按钮</li>\n<li>书签选项</li>\n<li>刷新和停止按钮</li>\n<li>主页按钮</li>\n</ul>\n<p><strong>浏览器高层架构</strong></p>\n<p>组成浏览器的组件有：</p>\n<ul>\n<li><strong>用户界面</strong> 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分</li>\n<li><strong>浏览器引擎</strong> 浏览器引擎负责让 UI 和渲染引擎协调工作</li>\n<li><strong>渲染引擎</strong> 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上</li>\n<li><strong>网络组件</strong> 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现</li>\n<li><strong>UI后端</strong> UI 后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现</li>\n<li><strong>Javascript</strong> 引擎 Javascript 引擎用于解析和执行 Javascript 代码</li>\n<li><strong>数据存储</strong> 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL 和 FileSystem 之类的存储机制</li>\n</ul>\n<p>##HTML 解析</p>\n<p>浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成8kB大小的分块传输。</p>\n<p>HTML 解析器的主要工作是对 HTML 文档进行解析，生成解析树。</p>\n<p>解析树是以 DOM 元素以及属性为节点的树。DOM是文档对象模型(Document Object Model)的缩写，它是 HTML 文档的对象表示，同时也是 HTML 元素面向外部(如Javascript)的接口。树的根部是”Document”对象。整个 DOM 和 HTML 文档几乎是一对一的关系。</p>\n<p><strong>解析算法</strong></p>\n<p>HTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:</p>\n<ul>\n<li>语言本身的“宽容”特性</li>\n<li>HTML 本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们</li>\n<li>解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于 HTML 来说，动态代码，例如脚本元素中包含的 document.write() 方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容</li>\n</ul>\n<p>由于不能使用常用的解析技术，浏览器创造了专门用于解析 HTML 的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。</p>\n<p><strong>解析结束之后</strong></p>\n<p>浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。</p>\n<p>此时浏览器把文档标记为可交互的（interactive），浏览器开始解析处于“推迟（deferred）”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成（complete）”，浏览器会触发“加载（load）”事件。</p>\n<p>注意解析 HTML 网页时永远不会出现“无效语法（Invalid Syntax）”错误，浏览器会修复所有错误内容，然后继续解析。</p>\n<p>##CSS 解析</p>\n<ul>\n<li>根据 CSS词法和句法 分析CSS文件和 <style> 标签包含的内容以及 style 属性的值</li>\n<li>每个CSS文件都被解析成一个样式表对象（StyleSheet object），这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象</li>\n<li>CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器</li>\n</ul>\n<p>##页面渲染</p>\n<ul>\n<li>通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值</li>\n<li>通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算”Frame 树”中每个节点的首选(preferred)宽度</li>\n<li>通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度</li>\n<li>通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度</li>\n<li>使用上面的计算结果构建每个节点的坐标</li>\n<li>当存在元素使用 floated，位置有 absolutely 或 relatively 属性的时候，会有更多复杂的计算，详见<a href=\"http://dev.w3.org/csswg/css2/\">http://dev.w3.org/csswg/css2/</a> 和 <a href=\"http://www.w3.org/Style/CSS/current-work\">http://www.w3.org/Style/CSS/current-work</a></li>\n<li>创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层</li>\n<li>页面上的每个层都被分配了纹理(?)</li>\n<li>每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制</li>\n<li>上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量</li>\n<li>计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。</li>\n</ul>\n<p>##GPU 渲染</p>\n<ul>\n<li>在渲染过程中，图形处理层可能使用通用用途的 CPU，也可能使用图形处理器 GPU</li>\n<li>当使用 GPU 用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用 GPU 强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。</li>\n</ul>\n<p>##Window Server</p>\n<p>##后期渲染与用户引发的处理</p>\n<p>渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google Doodle动画)或与用户交互(在搜索栏输入关键字获得搜索建议)。类似Flash和Java的插件也会运行，尽管Google主页里没有。这些脚本可以触发网络请求，也可能改变网页的内容和布局，产生又一轮渲染与绘制。</p>\n</style></li></ul>","excerpt":"","more":"<img src=\"/2017/07/29/curl-google-com/google.gif\" alt=\"google\" title=\"google\">\n<p>#浏览器输入google.com后发生的事</p>\n<p>##”g”键按下</p>\n<p>接下来的内容介绍了物理键盘和系统中断的工作原理，但是有一部分内容却没有涉及。当你按下“g”键，浏览器接收到这个消息之后，会触发自动完成机制。浏览器根据自己的算法，以及你是否处于隐私浏览模式，会在浏览器的地址框下方给出输入建议。大部分算法会优先考虑根据你的搜索历史和书签等内容给出建议。你打算输入 “google.com”，因此给出的建议并不匹配。但是输入过程中仍然有大量的代码在后台运行，你的每一次按键都会使得给出的建议更加准确。甚至有可能在你输入之前，浏览器就将 “google.com” 建议给你。</p>\n<p>##回车键按下</p>\n<p>为了从零开始，我们选择键盘上的回车键被按到最低处作为起点。在这个时刻，一个专用于回车键的电流回路被直接地或者通过电容器间接地闭合了，使得少量的电流进入了键盘的逻辑电路系统。这个系统会扫描每个键的状态，对于按键开关的电位弹跳变化进行噪音消除(debounce)，并将其转化为键盘码值。在这里，回车的码值是13。键盘控制器在得到码值之后，将其编码，用于之后的传输。现在这个传输过程几乎都是通过通用串行总线(USB)或者蓝牙(Bluetooth)来进行的，以前是通过PS/2或者ADB连接进行。</p>\n<p>###USB键盘：</p>\n<ul>\n<li>键盘的USB元件通过计算机上的USB接口与USB控制器相连接，USB接口中的第一号针为它提供了5V的电压</li>\n<li>键码值存储在键盘内部电路一个叫做”endpoint”的寄存器内</li>\n<li>USB控制器大概每隔10ms便查询一次”endpoint”以得到存储的键码值数据，这个最短时间间隔由键盘提供</li>\n<li>键值码值通过USB串行接口引擎被转换成一个或者多个遵循低层USB协议的USB数据包</li>\n<li>这些数据包通过D+针或者D-针(中间的两个针)，以最高1.5Mb/s的速度从键盘传输至计算机。速度限制是因为人机交互设备总是被声明成”低速设备”（USB 2.0 compliance）</li>\n<li>这个串行信号在计算机的USB控制器处被解码，然后被人机交互设备通用键盘驱动进行进一步解释。之后按键的码值被传输到操作系统的硬件抽象层</li>\n</ul>\n<p>###虚拟键盘（触屏设备）：</p>\n<ul>\n<li>在现代电容屏上，当用户把手指放在屏幕上时，一小部分电流从传导层的静电域经过手指传导，形成了一个回路，使得屏幕上触控的那一点电压下降，屏幕控制器产生一个中断，报告这次“点击”的坐标</li>\n<li>然后移动操作系统通知当前活跃的应用，有一个点击事件发生在它的某个GUI部件上了，现在这个部件是虚拟键盘的按钮</li>\n<li>虚拟键盘引发一个软中断，返回给OS一个“按键按下”消息</li>\n<li>这个消息又返回来向当前活跃的应用通知一个“按键按下”事件</li>\n</ul>\n<p>##产生中断[非USB键盘]</p>\n<p>键盘在它的中断请求线(IRQ)上发送信号，信号会被中断控制器映射到一个中断向量，实际上就是一个整型数 。CPU使用中断描述符表(IDT)把中断向量映射到对应函数，这些函数被称为中断处理器，它们由操作系统内核提供。当一个中断到达时，CPU根据IDT和中断向量索引到对应的中断处理器，然后操作系统内核出场了。</p>\n<p>###(Windows)一个 WM_KEYDOWN 消息被发往应用程序</p>\n<p>HID把键盘按下的事件传送给 <code>KBDHID.sys</code> 驱动，把HID的信号转换成一个扫描码(Scancode)，这里回车的扫描码是 <code>VK_RETURN(0x0d)</code>。 <code>KBDHID.sys</code> 驱动和 <code>KBDCLASS.sys</code> (键盘类驱动,keyboard class driver)进行交互，这个驱动负责安全地处理所有键盘和小键盘的输入事件。之后它又去调用 <code>Win32K.sys</code> ，在这之前有可能把消息传递给安装的第三方键盘过滤器。这些都是发生在内核模式。</p>\n<p><code>Win32K.sys</code> 通过 <code>GetForegroundWindow()</code> API函数找到当前哪个窗口是活跃的。这个API函数提供了当前浏览器的地址栏的句柄。Windows系统的”message pump”机制调用 <code>SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam)</code> 函数， <code>lParam</code> 是一个用来指示这个按键的更多信息的掩码，这些信息包括按键重复次数（这里是0），实际扫描码（可能依赖于OEM厂商，不过通常不会是 <code>VK_RETURN</code> ），功能键（alt, shift, ctrl）是否被按下（在这里没有），以及一些其他状态。</p>\n<p>Windows的 <code>SendMessage</code> API直接将消息添加到特定窗口句柄 <code>hWnd</code> 的消息队列中，之后赋给 hWnd 的主要消息处理函数 <code>WindowProc</code> 将会被调用，用于处理队列中的消息。</p>\n<p>当前活跃的句柄 <code>hWnd</code> 实际上是一个edit control控件，这种情况下，<code>WindowProc</code> 有一个用于处理 <code>WM_KEYDOWN</code> 消息的处理器，这段代码会查看 <code>SendMessage</code> 传入的第三个参数 <code>wParam</code> ，因为这个参数是 <code>VK_RETURN</code> ，于是它知道用户按下了回车键。</p>\n<p>###(Mac OS X)一个 KeyDown NSEvent被发往应用程序</p>\n<p>中断信号引发了I/O Kit Kext键盘驱动的中断处理事件，驱动把信号翻译成键码值，然后传给OS X的 <code>WindowServer</code> 进程。然后， <code>WindowServer</code> 将这个事件通过Mach端口分发给合适的（活跃的，或者正在监听的）应用程序，这个信号会被放到应用程序的消息队列里。队列中的消息可以被拥有足够高权限的线程使用 <code>mach_ipc_dispatch</code> 函数读取到。这个过程通常是由 <code>NSApplication</code> 主事件循环产生并且处理的，通过 <code>NSEventType</code> 为 <code>KeyDown</code> 的 <code>NSEvent</code> 。</p>\n<p>###(GNU/Linux)Xorg 服务器监听键码值</p>\n<p>当使用图形化的 X Server 时，X Server 会按照特定的规则把键码值再一次映射，映射成扫描码。当这个映射过程完成之后， X Server 把这个按键字符发送给窗口管理器(DWM，metacity, i3等等)，窗口管理器再把字符发送给当前窗口。当前窗口使用有关图形API把文字打印在输入框内。</p>\n<p>##输入的是 URL 还是搜索的关键字？</p>\n<p>当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。</p>\n<p>##解析URL</p>\n<p>浏览器通过 URL 能够知道下面的信息：</p>\n<ul>\n<li>Protocol “http”<br>使用HTTP协议</li>\n<li>Resource “/“<br>请求的资源是主页(index)</li>\n</ul>\n<p>##转换非 ASCII 的 Unicode 字符</p>\n<ul>\n<li>浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符</li>\n<li>这里主机名是 google.com ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码</li>\n</ul>\n<p>##检查 HSTS 列表</p>\n<ul>\n<li>浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站</li>\n<li>如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送</li>\n<li>注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。浏览器向网站发出第一个 HTTP 请求之后，网站会返回浏览器一个响应，请求浏览器只使用 HTTPS 发送请求。然而，就是这第一个 HTTP 请求，却可能会使用户受到 downgrade attack 的威胁，这也是为什么现代浏览器都预置了 HSTS 列表。</li>\n</ul>\n<p>##DNS 查询</p>\n<ul>\n<li>浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome://net-internals/#dns）。</li>\n<li>如果缓存中没有，就去调用 gethostbyname 库函数（操作系统不同函数也不同）进行查询。</li>\n<li>gethostbyname 函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，Hosts 的位置 不同的操作系统有所不同</li>\n<li>如果 gethostbyname 没有这个域名的缓存记录，也没有在 hosts 里找到，它将会向 DNS 服务器发送一条 DNS 查询请求。DNS 服务器是由网络通信栈提供的，通常是本地路由器或者 ISP 的缓存 DNS 服务器。</li>\n<li>查询本地 DNS 服务器</li>\n<li>如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询</li>\n<li>如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询</li>\n</ul>\n<p>##ARP 过程</p>\n<p>要想发送 ARP（地址解析协议）广播，我们需要有一个目标 IP 地址，同时还需要知道用于发送 ARP 广播的接口的 MAC 地址。</p>\n<ul>\n<li>首先查询 ARP 缓存，如果缓存命中，我们返回结果：目标 IP = MAC</li>\n</ul>\n<p>如果缓存没有命中：</p>\n<ul>\n<li>查看路由表，看看目标 IP 地址是不是在本地路由表中的某个子网内。是的话，使用跟那个子网相连的接口，否则使用与默认网关相连的接口。</li>\n<li>查询选择的网络接口的 MAC 地址</li>\n<li>我们发送一个二层（ OSI 模型 中的数据链路层）ARP 请求：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ARP Request:</div><div class=\"line\"></div><div class=\"line\">Sender MAC: interface:mac:address:here</div><div class=\"line\">Sender IP: interface.ip.goes.here</div><div class=\"line\">Target MAC: FF:FF:FF:FF:FF:FF (Broadcast)</div><div class=\"line\">Target IP: target.ip.goes.here</div></pre></td></tr></table></figure>\n<p>根据连接主机和路由器的硬件类型不同，可以分为以下几种情况：</p>\n<p>直连：</p>\n<ul>\n<li><p>如果我们和路由器是直接连接的，路由器会返回一个 ARP Reply （见下面）。<br>集线器：</p>\n</li>\n<li><p>如果我们连接到一个集线器，集线器会把 ARP 请求向所有其它端口广播，如果路由器也“连接”在其中，它会返回一个 ARP Reply 。</p>\n</li>\n</ul>\n<p>交换机：</p>\n<ul>\n<li>如果我们连接到了一个交换机，交换机会检查本地 CAM/MAC 表，看看哪个端口有我们要找的那个 MAC 地址，如果没有找到，交换机会向所有其它端口广播这个 ARP 请求。</li>\n<li>如果交换机的 MAC/CAM 表中有对应的条目，交换机会向有我们想要查询的 MAC 地址的那个端口发送 ARP 请求</li>\n<li>如果路由器也“连接”在其中，它会返回一个 ARP Reply</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ARP Reply:</div><div class=\"line\"></div><div class=\"line\">Sender MAC: target:mac:address:here</div><div class=\"line\">Sender IP: target.ip.goes.here</div><div class=\"line\">Target MAC: interface:mac:address:here</div><div class=\"line\">Target IP: interface.ip.goes.here</div></pre></td></tr></table></figure>\n<p>现在我们有了 DNS 服务器或者默认网关的 IP 地址，我们可以继续 DNS 请求了：</p>\n<ul>\n<li>使用 53 端口向 DNS 服务器发送 UDP 请求包，如果响应包太大，会使用 TCP 协议</li>\n<li>如果本地/ISP DNS 服务器没有找到结果，它会发送一个递归查询请求，一层一层向高层 DNS 服务器做查询，直到查询到起始授权机构，如果找到会把结果返回</li>\n</ul>\n<p>##使用套接字</p>\n<p>当浏览器得到了目标服务器的 IP 地址，以及 URL 中给出来端口号（http 协议默认端口号是 80， https 默认端口号是 443），它会调用系统库函数 socket ，请求一个 TCP流套接字，对应的参数是 AF_INET/AF_INET6 和 SOCK_STREAM 。</p>\n<ul>\n<li>这个请求首先被交给传输层，在传输层请求被封装成 TCP segment。目标端口会被加入头部，源端口会在系统内核的动态端口范围内选取（Linux下是ip_local_port_range)</li>\n<li>TCP segment 被送往网络层，网络层会在其中再加入一个 IP 头部，里面包含了目标服务器的IP地址以及本机的IP地址，把它封装成一个TCP packet。</li>\n<li>这个 TCP packet 接下来会进入链路层，链路层会在封包中加入 frame头 部，里面包含了本地内置网卡的MAC地址以及网关（本地路由器）的 MAC 地址。像前面说的一样，如果内核不知道网关的 MAC 地址，它必须进行 ARP 广播来查询其地址。</li>\n</ul>\n<p>到了现在，TCP 封包已经准备好了，可以使用下面的方式进行传输：</p>\n<ul>\n<li>以太网</li>\n<li>WiFi</li>\n<li>蜂窝数据网络</li>\n</ul>\n<p>对于大部分家庭网络和小型企业网络来说，封包会从本地计算机出发，经过本地网络，再通过调制解调器把数字信号转换成模拟信号，使其适于在电话线路，有线电视光缆和无线电话线路上传输。在传输线路的另一端，是另外一个调制解调器，它把模拟信号转换回数字信号，交由下一个 网络节点 处理。节点的目标地址和源地址将在后面讨论。</p>\n<p>大型企业和比较新的住宅通常使用光纤或直接以太网连接，这种情况下信号一直是数字的，会被直接传到下一个 网络节点 进行处理。</p>\n<p>最终封包会到达管理本地子网的路由器。在那里出发，它会继续经过自治区域(autonomous system, 缩写 AS)的边界路由器，其他自治区域，最终到达目标服务器。一路上经过的这些路由器会从IP数据报头部里提取出目标地址，并将封包正确地路由到下一个目的地。IP数据报头部 time to live (TTL) 域的值每经过一个路由器就减1，如果封包的TTL变为0，或者路由器由于网络拥堵等原因封包队列满了，那么这个包会被路由器丢弃。</p>\n<p>上面的发送和接受过程在 TCP 连接期间会发生很多次：</p>\n<ul>\n<li>客户端选择一个初始序列号(ISN)，将设置了 SYN 位的封包发送给服务器端，表明自己要建立连接并设置了初始序列号</li>\n<li>服务器端接收到 SYN 包，如果它可以建立连接：<ul>\n<li>服务器端选择它自己的初始序列号</li>\n<li>服务器端设置 SYN 位，表明自己选择了一个初始序列号</li>\n<li>服务器端把 (客户端ISN + 1) 复制到 ACK 域，并且设置 ACK 位，表明自己接收到了客户端的第一个封包</li>\n</ul>\n</li>\n<li>客户端通过发送下面一个封包来确认这次连接：<ul>\n<li>自己的序列号+1</li>\n<li>接收端 ACK+1</li>\n<li>设置 ACK 位</li>\n</ul>\n</li>\n<li>数据通过下面的方式传输：<ul>\n<li>当一方发送了N个 Bytes 的数据之后，将自己的 SEQ 序列号也增加N</li>\n<li>另一方确认接收到这个数据包（或者一系列数据包）之后，它发送一个 ACK 包，ACK 的值设置为接收到的数据包的最后一个序列号</li>\n</ul>\n</li>\n<li>关闭连接时：<ul>\n<li>要关闭连接的一方发送一个 FIN 包</li>\n<li>另一方确认这个 FIN 包，并且发送自己的 FIN 包</li>\n<li>要关闭的一方使用 ACK 包来确认接收到了 FIN</li>\n</ul>\n</li>\n</ul>\n<p>##TLS 握手</p>\n<ul>\n<li>客户端发送一个 ClientHello 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。</li>\n<li>服务器端向客户端返回一个 ServerHello 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥</li>\n<li>客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥</li>\n<li>服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥</li>\n<li>客户端发送一个 Finished 消息给服务器端，使用对称密钥加密这次通讯的一个散列值</li>\n<li>服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 Finished 消息，也使用协商好的对称密钥加密</li>\n<li>从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容</li>\n</ul>\n<p>##HTTP 协议</p>\n<p>如果浏览器是 Google 出品的，它不会使用 HTTP 协议来获取页面信息，而是会与服务器端发送请求，商讨使用 SPDY 协议。</p>\n<p>如果浏览器使用 HTTP 协议而不支持 SPDY 协议，它会向服务器发送这样的一个请求:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET / HTTP/1.1</div><div class=\"line\">Host: google.com</div><div class=\"line\">Connection: close</div><div class=\"line\">[其他头部]</div></pre></td></tr></table></figure>\n<p>“其他头部”包含了一系列的由冒号分割开的键值对，它们的格式符合HTTP协议标准，它们之间由一个换行符分割开来。（这里我们假设浏览器没有违反HTTP协议标准的bug，同时假设浏览器使用 HTTP/1.1 协议，不然的话头部可能不包含 Host 字段，同时 GET 请求中的版本号会变成 HTTP/1.0 或者 HTTP/0.9 。）</p>\n<p>HTTP/1.1 定义了“关闭连接”的选项 “close”，发送者使用这个选项指示这次连接在响应结束之后会断开。例如：</p>\n<blockquote>\n<p>Connection:close</p>\n</blockquote>\n<p>不支持持久连接的 HTTP/1.1 应用必须在每条消息中都包含 “close” 选项。</p>\n<p>在发送完这些请求和头部之后，浏览器发送一个换行符，表示要发送的内容已经结束了。</p>\n<p>服务器端返回一个响应码，指示这次请求的状态，响应的形式是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">200 OK</div><div class=\"line\">[响应头部]</div></pre></td></tr></table></figure>\n<p>然后是一个换行，接下来有效载荷(payload)，也就是 <code>www.google.com</code> 的HTML内容。服务器下面可能会关闭连接，如果客户端请求保持连接的话，服务器端会保持连接打开，以供之后的请求重用。</p>\n<p>如果浏览器发送的HTTP头部包含了足够多的信息（例如包含了 Etag 头部），以至于服务器可以判断出，浏览器缓存的文件版本自从上次获取之后没有再更改过，服务器可能会返回这样的响应:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">304 Not Modified</div><div class=\"line\">[响应头部]</div></pre></td></tr></table></figure>\n<p>这个响应没有有效载荷，浏览器会从自己的缓存中取出想要的内容。</p>\n<p>在解析完 HTML 之后，浏览器和客户端会重复上面的过程，直到HTML页面引入的所有资源（图片，CSS，favicon.ico等等）全部都获取完毕，区别只是头部的 <code>GET / HTTP/1.1</code> 会变成 <code>GET /$(相对www.google.com的URL) HTTP/1.1</code> 。</p>\n<p>如果HTML引入了 <code>www.google.com</code> 域名之外的资源，浏览器会回到上面解析域名那一步，按照下面的步骤往下一步一步执行，请求中的 <code>Host</code> 头部会变成另外的域名。</p>\n<p>##HTTP 服务器请求处理</p>\n<p>HTTPD(HTTP Daemon)在服务器端处理请求/响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。</p>\n<ul>\n<li>HTTPD 接收请求</li>\n<li>服务器把请求拆分为以下几个参数：<ul>\n<li>HTTP 请求方法(GET, POST, HEAD, PUT, DELETE, CONNECT, OPTIONS, 或者 TRACE)。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法</li>\n<li>域名：google.com</li>\n<li>请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)</li>\n</ul>\n</li>\n<li>服务器验证其上已经配置了 google.com 的虚拟主机</li>\n<li>服务器验证 google.com 接受 GET 方法</li>\n<li>服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)</li>\n<li>如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求</li>\n<li>服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 “/“ ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。</li>\n<li>服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者</li>\n</ul>\n<p>##浏览器背后的故事</p>\n<p>当服务器提供了资源之后（HTML，CSS，JS，图片等），浏览器会执行下面的操作：</p>\n<ul>\n<li>解析 —— HTML，CSS，JS</li>\n<li>渲染 —— 构建 DOM 树 -&gt; 渲染 -&gt; 布局 -&gt; 绘制</li>\n</ul>\n<p>##浏览器</p>\n<p>浏览器的功能是从服务器上取回你想要的资源，然后展示在浏览器窗口当中。资源通常是 HTML 文件，也可能是 PDF，图片，或者其他类型的内容。资源的位置通过用户提供的 URI(Uniform Resource Identifier) 来确定。</p>\n<p>浏览器解释和展示 HTML 文件的方法，在 HTML 和 CSS 的标准中有详细介绍。这些标准由 Web 标准组织 W3C(World Wide Web Consortium) 维护。</p>\n<p>不同浏览器的用户界面大都十分接近，有很多共同的 UI 元素：</p>\n<ul>\n<li>一个地址栏</li>\n<li>后退和前进按钮</li>\n<li>书签选项</li>\n<li>刷新和停止按钮</li>\n<li>主页按钮</li>\n</ul>\n<p><strong>浏览器高层架构</strong></p>\n<p>组成浏览器的组件有：</p>\n<ul>\n<li><strong>用户界面</strong> 用户界面包含了地址栏，前进后退按钮，书签菜单等等，除了请求页面之外所有你看到的内容都是用户界面的一部分</li>\n<li><strong>浏览器引擎</strong> 浏览器引擎负责让 UI 和渲染引擎协调工作</li>\n<li><strong>渲染引擎</strong> 渲染引擎负责展示请求内容。如果请求的内容是 HTML，渲染引擎会解析 HTML 和 CSS，然后将内容展示在屏幕上</li>\n<li><strong>网络组件</strong> 网络组件负责网络调用，例如 HTTP 请求等，使用一个平台无关接口，下层是针对不同平台的具体实现</li>\n<li><strong>UI后端</strong> UI 后端用于绘制基本 UI 组件，例如下拉列表框和窗口。UI 后端暴露一个统一的平台无关的接口，下层使用操作系统的 UI 方法实现</li>\n<li><strong>Javascript</strong> 引擎 Javascript 引擎用于解析和执行 Javascript 代码</li>\n<li><strong>数据存储</strong> 数据存储组件是一个持久层。浏览器可能需要在本地存储各种各样的数据，例如 Cookie 等。浏览器也需要支持诸如 localStorage，IndexedDB，WebSQL 和 FileSystem 之类的存储机制</li>\n</ul>\n<p>##HTML 解析</p>\n<p>浏览器渲染引擎从网络层取得请求的文档，一般情况下文档会分成8kB大小的分块传输。</p>\n<p>HTML 解析器的主要工作是对 HTML 文档进行解析，生成解析树。</p>\n<p>解析树是以 DOM 元素以及属性为节点的树。DOM是文档对象模型(Document Object Model)的缩写，它是 HTML 文档的对象表示，同时也是 HTML 元素面向外部(如Javascript)的接口。树的根部是”Document”对象。整个 DOM 和 HTML 文档几乎是一对一的关系。</p>\n<p><strong>解析算法</strong></p>\n<p>HTML不能使用常见的自顶向下或自底向上方法来进行分析。主要原因有以下几点:</p>\n<ul>\n<li>语言本身的“宽容”特性</li>\n<li>HTML 本身可能是残缺的，对于常见的残缺，浏览器需要有传统的容错机制来支持它们</li>\n<li>解析过程需要反复。对于其他语言来说，源码不会在解析过程中发生变化，但是对于 HTML 来说，动态代码，例如脚本元素中包含的 document.write() 方法会在源码中添加内容，也就是说，解析过程实际上会改变输入的内容</li>\n</ul>\n<p>由于不能使用常用的解析技术，浏览器创造了专门用于解析 HTML 的解析器。解析算法在 HTML5 标准规范中有详细介绍，算法主要包含了两个阶段：标记化（tokenization）和树的构建。</p>\n<p><strong>解析结束之后</strong></p>\n<p>浏览器开始加载网页的外部资源（CSS，图像，Javascript 文件等）。</p>\n<p>此时浏览器把文档标记为可交互的（interactive），浏览器开始解析处于“推迟（deferred）”模式的脚本，也就是那些需要在文档解析完毕之后再执行的脚本。之后文档的状态会变为“完成（complete）”，浏览器会触发“加载（load）”事件。</p>\n<p>注意解析 HTML 网页时永远不会出现“无效语法（Invalid Syntax）”错误，浏览器会修复所有错误内容，然后继续解析。</p>\n<p>##CSS 解析</p>\n<ul>\n<li>根据 CSS词法和句法 分析CSS文件和 <style> 标签包含的内容以及 style 属性的值</li>\n<li>每个CSS文件都被解析成一个样式表对象（StyleSheet object），这个对象里包含了带有选择器的CSS规则，和对应CSS语法的对象</li>\n<li>CSS解析器可能是自顶向下的，也可能是使用解析器生成器生成的自底向上的解析器</li>\n</ul>\n<p>##页面渲染</p>\n<ul>\n<li>通过遍历DOM节点树创建一个“Frame 树”或“渲染树”，并计算每个节点的各个CSS样式值</li>\n<li>通过累加子节点的宽度，该节点的水平内边距(padding)、边框(border)和外边距(margin)，自底向上的计算”Frame 树”中每个节点的首选(preferred)宽度</li>\n<li>通过自顶向下的给每个节点的子节点分配可行宽度，计算每个节点的实际宽度</li>\n<li>通过应用文字折行、累加子节点的高度和此节点的内边距(padding)、边框(border)和外边距(margin)，自底向上的计算每个节点的高度</li>\n<li>使用上面的计算结果构建每个节点的坐标</li>\n<li>当存在元素使用 floated，位置有 absolutely 或 relatively 属性的时候，会有更多复杂的计算，详见<a href=\"http://dev.w3.org/csswg/css2/\">http://dev.w3.org/csswg/css2/</a> 和 <a href=\"http://www.w3.org/Style/CSS/current-work\">http://www.w3.org/Style/CSS/current-work</a></li>\n<li>创建layer(层)来表示页面中的哪些部分可以成组的被绘制，而不用被重新栅格化处理。每个帧对象都被分配给一个层</li>\n<li>页面上的每个层都被分配了纹理(?)</li>\n<li>每个层的帧对象都会被遍历，计算机执行绘图命令绘制各个层，此过程可能由CPU执行栅格化处理，或者直接通过D2D/SkiaGL在GPU上绘制</li>\n<li>上面所有步骤都可能利用到最近一次页面渲染时计算出来的各个值，这样可以减少不少计算量</li>\n<li>计算出各个层的最终位置，一组命令由 Direct3D/OpenGL发出，GPU命令缓冲区清空，命令传至GPU并异步渲染，帧被送到Window Server。</li>\n</ul>\n<p>##GPU 渲染</p>\n<ul>\n<li>在渲染过程中，图形处理层可能使用通用用途的 CPU，也可能使用图形处理器 GPU</li>\n<li>当使用 GPU 用于图形渲染时，图形驱动软件会把任务分成多个部分，这样可以充分利用 GPU 强大的并行计算能力，用于在渲染过程中进行大量的浮点计算。</li>\n</ul>\n<p>##Window Server</p>\n<p>##后期渲染与用户引发的处理</p>\n<p>渲染结束后，浏览器根据某些时间机制运行JavaScript代码(比如Google Doodle动画)或与用户交互(在搜索栏输入关键字获得搜索建议)。类似Flash和Java的插件也会运行，尽管Google主页里没有。这些脚本可以触发网络请求，也可能改变网页的内容和布局，产生又一轮渲染与绘制。</p>\n"},{"title":"百度地图离线API制作","date":"2016-12-08T07:47:17.000Z","_content":"{% asset_img baiduMap.jpg 配图木有名字 %}\n百度地图离线API制作，以API v1.3为例。更高版本请自行搜索。\n\n## 第一步\n访问 [http://api.map.baidu.com/api?v=1.3](http://api.map.baidu.com/api?v=1.3) 得到如下内容\n```javascript\n(function(){\n    window.wise=1;\n    window.netSpeed=254;\n    window.netType=1;\n    window.BMap_loadScriptTime = (new Date).getTime();\n    document.write('<script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=1.3&ak=&services=&t=20150527115231\"></script>');\n    document.write('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://api.map.baidu.com/res/13/bmap.css\"/>');\n})();\n```\n这一步将获得一个js文件的位置和一个css文件的位置，然后分别下载下来，放在准备好的文件夹里面，我分别存储在/js和/css里面。js的路径后面有若干参数，不管，下载下来的文件重新命名就好，比如js文件命名为`apiv1.3.min.js`\n\n## 第二步\n修改这个js中的代码。由于代码是压缩在一行上的，可通过网上的代码在线格式化。\n1. 搜索变量：`imgPath`，直到找到一段代码\n    ```javascript\n    var x=m?\"https://sapi.map.baidu.com/\":\"http://api.map.baidu.com/\";\n    var cd={imgPath:x+\"images/\",cityNames:{\"\\u5317\\u4eac\":\"bj\",\n    ```\n    把`imgPath:x+\"images/\"`中的x去掉即可，这样就变成了跟网络地址无关的相对位置了。这里指出的`images`文件夹，是与将来的html文件夹平行的目录里面的。\n    例如：\n    ```javascript\n    var x=m?\"https://sapi.map.baidu.com/\":\"http://api.map.baidu.com/\";\n    var cd={imgPath:\"images/\",cityNames:{\"\\u5317\\u4eac\":\"bj\",\n    ```\n1. 搜索变量：`_baseUrl`，直到找到这样的一段代码\n    ```javascript\n    preLoaded:{},Config:{_baseUrl:x+\"getmodules?v=1.3\",_timeout:5000},\n    ```\n    同样，要去掉x，这个x也是前面这段代码中的x。同时，不仅要去掉x，更要把地址指向js目录。\n    例如：\n    ```javascript\n    preLoaded:{},Config:{_baseUrl:\"js/\",_timeout:5000},\n    ```\n1. 继续搜索下一个`_baseUrl`，得到下面的代码：\n    ```javascript\n    window.setTimeout(function(){\n        var cP=cN.Config._baseUrl+\"&mod=\"+cN.Module._arrMdls.join(\",\");\n        cy.request(cP);\n        cN.Module._arrMdls.length=0;\n        cN.delayFlag=false;\n    },1);\n    ```\n    直接修改`cP`变量（变量名与版本有关，可能不同），注意：这里把加载地址直接写死\n    ```javascript\n    var cP=cN.Config._baseUrl+\"modules\";\n    cy.request(cP);\n    ```\n    这样，我们把动态模块加载改为了手动加载离线模块文件。\n    访问这个地址 [http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control,marker,poly](http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control,marker,poly) 我们就能拿到相应参数的模块源文件。\n    新建文件`modules`，放在js文件夹里面即可。\n1. 关键的一步：搜索`getTilesUrl`直到找到这样的一段（变量名aU可能不一样）\n```javascript\naU.getTilesUrl = function(cN, cQ) {\n    var cR = cN.x;\n    var cO = cN.y;\n    var T = \"20150518\";\n    var cP = \"pl\";\n    if (this.map.highResolutionEnabled()) {\n        cP = \"ph\"\n    }\n    var cM = j[Math.abs(cR + cO) % j.length] + \"?qt=tile&x=\"\n\t\t+ (cR + \"\").replace(/-/gi, \"M\") + \"&y=\"\n\t\t+ (cO + \"\").replace(/-/gi, \"M\") + \"&z=\" + cQ + \"&styles=\" + cP\n        + (a9.browser.ie == 6 ? \"&color_dep=32&colors=50\" : \"\")\n        + \"&udt=\" + T;\n    return cM.replace(/-(\\d+)/gi, \"M$1\")\n};\nwindow.BMAP_NORMAL_MAP = new cv(\"\\u5730\\u56fe\", aU, {\n    tips : \"\\u663e\\u793a\\u666e\\u901a\\u5730\\u56fe\"\n});\n```\n`getTilesUrl`这个方法，这里就是返回瓦片未知的关键方法。两个参数中，第一个参数是{x，y}，第二个参数就是z，这样xyz就都有了。\n直接把它计算出来的cM的结果重新计算一下，改成：\n```javascript\ncM = \"tiles/\" + cQ + \"/\" + cR + \"/\" + cO + \".jpg\";\n```\n.jpg后缀与你下载的瓦片图片格式有关。\n这样就设置了`BMAP_NORMAL_MAP`地图类型的地图瓦片获取url，即为放在tiles目录下的瓦片资源。同理可以设置卫星`BMAP_SATELLITE_MAP`等地图类型的离线瓦片url。\n\n## 第三步\n下载相关资源\n2. 图片文件\n像一些logo等图片资源。可通过chrome开发者工具查看缺少的图片文件，以及url。然后自行下载。将图片放在`images`文件夹中，并修改`bmap.css`中相应的url为本地路径。\n2. 依赖模块API文件\n    如果缺少某个依赖模块，则无法使用相应的API。\n    在运行前期工作中的在线地图时，就可发现，依赖的库参数是什么。例如：以下的代码运行，所请求的依赖库参数是[http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control](http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control)\n    ```html\n    <script type=\"text/javascript\">\n        var map = new BMap.Map(\"container\",{mapType:BMAP_NORMAL_MAP});\n        var point = new BMap.Point(116.404, 39.915);    // 创建点坐标\n        map.centerAndZoom(point,5);                     // 初始化地图,设置中心点坐标和地图级别。\n\n        //map.addControl(new BMap.MapTypeControl());\n        map.addControl(new BMap.NavigationControl());\n        map.enableScrollWheelZoom();                  // 启用滚轮放大缩小。\n        map.enableKeyboard();                         // 启用键盘操作。\n        //map.setCurrentCity(\"北京\");          // 设置地图显示的城市 此项是必须设置的\n    </script>\n    ```\n    总共有哪些依赖模块可以去`apiv1.3.min.js`中搜索`Dependency`\n2. 瓦片资源\n可以选择 `全能电子地图下载器` 下载，其中`1.9.5`版本有破解，不过有些瓦片无法下载。或者选择自己拼凑瓦片，有教程获取瓦片url。\n\n## 最后\n离线API算是做好了，目录结构大致为：\n- css\n    - bmap.css\n- images\n- js\n    - apiv1.3.min.js\n\t- modules\n- tiles\n\n[HawkUI](https://github.com/lakehumin/hawkui)项目中便用到了该离线API，文件在`public`目录下。","source":"_posts/BaiduMapAPI.md","raw":"---\ntitle: 百度地图离线API制作\ndate: 2016-12-08 15:47:17\ntags:\n- 百度地图\n- 工具\ncategories:\n- 开发工具\n---\n{% asset_img baiduMap.jpg 配图木有名字 %}\n百度地图离线API制作，以API v1.3为例。更高版本请自行搜索。\n\n## 第一步\n访问 [http://api.map.baidu.com/api?v=1.3](http://api.map.baidu.com/api?v=1.3) 得到如下内容\n```javascript\n(function(){\n    window.wise=1;\n    window.netSpeed=254;\n    window.netType=1;\n    window.BMap_loadScriptTime = (new Date).getTime();\n    document.write('<script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=1.3&ak=&services=&t=20150527115231\"></script>');\n    document.write('<link rel=\"stylesheet\" type=\"text/css\" href=\"http://api.map.baidu.com/res/13/bmap.css\"/>');\n})();\n```\n这一步将获得一个js文件的位置和一个css文件的位置，然后分别下载下来，放在准备好的文件夹里面，我分别存储在/js和/css里面。js的路径后面有若干参数，不管，下载下来的文件重新命名就好，比如js文件命名为`apiv1.3.min.js`\n\n## 第二步\n修改这个js中的代码。由于代码是压缩在一行上的，可通过网上的代码在线格式化。\n1. 搜索变量：`imgPath`，直到找到一段代码\n    ```javascript\n    var x=m?\"https://sapi.map.baidu.com/\":\"http://api.map.baidu.com/\";\n    var cd={imgPath:x+\"images/\",cityNames:{\"\\u5317\\u4eac\":\"bj\",\n    ```\n    把`imgPath:x+\"images/\"`中的x去掉即可，这样就变成了跟网络地址无关的相对位置了。这里指出的`images`文件夹，是与将来的html文件夹平行的目录里面的。\n    例如：\n    ```javascript\n    var x=m?\"https://sapi.map.baidu.com/\":\"http://api.map.baidu.com/\";\n    var cd={imgPath:\"images/\",cityNames:{\"\\u5317\\u4eac\":\"bj\",\n    ```\n1. 搜索变量：`_baseUrl`，直到找到这样的一段代码\n    ```javascript\n    preLoaded:{},Config:{_baseUrl:x+\"getmodules?v=1.3\",_timeout:5000},\n    ```\n    同样，要去掉x，这个x也是前面这段代码中的x。同时，不仅要去掉x，更要把地址指向js目录。\n    例如：\n    ```javascript\n    preLoaded:{},Config:{_baseUrl:\"js/\",_timeout:5000},\n    ```\n1. 继续搜索下一个`_baseUrl`，得到下面的代码：\n    ```javascript\n    window.setTimeout(function(){\n        var cP=cN.Config._baseUrl+\"&mod=\"+cN.Module._arrMdls.join(\",\");\n        cy.request(cP);\n        cN.Module._arrMdls.length=0;\n        cN.delayFlag=false;\n    },1);\n    ```\n    直接修改`cP`变量（变量名与版本有关，可能不同），注意：这里把加载地址直接写死\n    ```javascript\n    var cP=cN.Config._baseUrl+\"modules\";\n    cy.request(cP);\n    ```\n    这样，我们把动态模块加载改为了手动加载离线模块文件。\n    访问这个地址 [http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control,marker,poly](http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control,marker,poly) 我们就能拿到相应参数的模块源文件。\n    新建文件`modules`，放在js文件夹里面即可。\n1. 关键的一步：搜索`getTilesUrl`直到找到这样的一段（变量名aU可能不一样）\n```javascript\naU.getTilesUrl = function(cN, cQ) {\n    var cR = cN.x;\n    var cO = cN.y;\n    var T = \"20150518\";\n    var cP = \"pl\";\n    if (this.map.highResolutionEnabled()) {\n        cP = \"ph\"\n    }\n    var cM = j[Math.abs(cR + cO) % j.length] + \"?qt=tile&x=\"\n\t\t+ (cR + \"\").replace(/-/gi, \"M\") + \"&y=\"\n\t\t+ (cO + \"\").replace(/-/gi, \"M\") + \"&z=\" + cQ + \"&styles=\" + cP\n        + (a9.browser.ie == 6 ? \"&color_dep=32&colors=50\" : \"\")\n        + \"&udt=\" + T;\n    return cM.replace(/-(\\d+)/gi, \"M$1\")\n};\nwindow.BMAP_NORMAL_MAP = new cv(\"\\u5730\\u56fe\", aU, {\n    tips : \"\\u663e\\u793a\\u666e\\u901a\\u5730\\u56fe\"\n});\n```\n`getTilesUrl`这个方法，这里就是返回瓦片未知的关键方法。两个参数中，第一个参数是{x，y}，第二个参数就是z，这样xyz就都有了。\n直接把它计算出来的cM的结果重新计算一下，改成：\n```javascript\ncM = \"tiles/\" + cQ + \"/\" + cR + \"/\" + cO + \".jpg\";\n```\n.jpg后缀与你下载的瓦片图片格式有关。\n这样就设置了`BMAP_NORMAL_MAP`地图类型的地图瓦片获取url，即为放在tiles目录下的瓦片资源。同理可以设置卫星`BMAP_SATELLITE_MAP`等地图类型的离线瓦片url。\n\n## 第三步\n下载相关资源\n2. 图片文件\n像一些logo等图片资源。可通过chrome开发者工具查看缺少的图片文件，以及url。然后自行下载。将图片放在`images`文件夹中，并修改`bmap.css`中相应的url为本地路径。\n2. 依赖模块API文件\n    如果缺少某个依赖模块，则无法使用相应的API。\n    在运行前期工作中的在线地图时，就可发现，依赖的库参数是什么。例如：以下的代码运行，所请求的依赖库参数是[http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control](http://api.map.baidu.com/getmodules?v=1.3&mod=map,oppc,tile,control)\n    ```html\n    <script type=\"text/javascript\">\n        var map = new BMap.Map(\"container\",{mapType:BMAP_NORMAL_MAP});\n        var point = new BMap.Point(116.404, 39.915);    // 创建点坐标\n        map.centerAndZoom(point,5);                     // 初始化地图,设置中心点坐标和地图级别。\n\n        //map.addControl(new BMap.MapTypeControl());\n        map.addControl(new BMap.NavigationControl());\n        map.enableScrollWheelZoom();                  // 启用滚轮放大缩小。\n        map.enableKeyboard();                         // 启用键盘操作。\n        //map.setCurrentCity(\"北京\");          // 设置地图显示的城市 此项是必须设置的\n    </script>\n    ```\n    总共有哪些依赖模块可以去`apiv1.3.min.js`中搜索`Dependency`\n2. 瓦片资源\n可以选择 `全能电子地图下载器` 下载，其中`1.9.5`版本有破解，不过有些瓦片无法下载。或者选择自己拼凑瓦片，有教程获取瓦片url。\n\n## 最后\n离线API算是做好了，目录结构大致为：\n- css\n    - bmap.css\n- images\n- js\n    - apiv1.3.min.js\n\t- modules\n- tiles\n\n[HawkUI](https://github.com/lakehumin/hawkui)项目中便用到了该离线API，文件在`public`目录下。","slug":"BaiduMapAPI","published":1,"updated":"2017-07-15T03:44:40.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5pb42tc0006cgomyzalfget","content":"<img src=\"/2016/12/08/BaiduMapAPI/baiduMap.jpg\" alt=\"配图木有名字\" title=\"配图木有名字\">\n<p>百度地图离线API制作，以API v1.3为例。更高版本请自行搜索。</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>访问 <a href=\"http://api.map.baidu.com/api?v=1.3\" target=\"_blank\" rel=\"external\">http://api.map.baidu.com/api?v=1.3</a> 得到如下内容<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.wise=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">window</span>.netSpeed=<span class=\"number\">254</span>;</div><div class=\"line\">    <span class=\"built_in\">window</span>.netType=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">window</span>.BMap_loadScriptTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).getTime();</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=1.3&amp;ak=&amp;services=&amp;t=20150527115231\"&gt;&lt;/script&gt;'</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://api.map.baidu.com/res/13/bmap.css\"/&gt;'</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这一步将获得一个js文件的位置和一个css文件的位置，然后分别下载下来，放在准备好的文件夹里面，我分别存储在/js和/css里面。js的路径后面有若干参数，不管，下载下来的文件重新命名就好，比如js文件命名为<code>apiv1.3.min.js</code></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>修改这个js中的代码。由于代码是压缩在一行上的，可通过网上的代码在线格式化。</p>\n<ol>\n<li><p>搜索变量：<code>imgPath</code>，直到找到一段代码</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x=m?<span class=\"string\">\"https://sapi.map.baidu.com/\"</span>:<span class=\"string\">\"http://api.map.baidu.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> cd=&#123;<span class=\"attr\">imgPath</span>:x+<span class=\"string\">\"images/\"</span>,<span class=\"attr\">cityNames</span>:&#123;<span class=\"string\">\"\\u5317\\u4eac\"</span>:<span class=\"string\">\"bj\"</span>,</div></pre></td></tr></table></figure>\n<p> 把<code>imgPath:x+&quot;images/&quot;</code>中的x去掉即可，这样就变成了跟网络地址无关的相对位置了。这里指出的<code>images</code>文件夹，是与将来的html文件夹平行的目录里面的。<br> 例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x=m?<span class=\"string\">\"https://sapi.map.baidu.com/\"</span>:<span class=\"string\">\"http://api.map.baidu.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> cd=&#123;<span class=\"attr\">imgPath</span>:<span class=\"string\">\"images/\"</span>,<span class=\"attr\">cityNames</span>:&#123;<span class=\"string\">\"\\u5317\\u4eac\"</span>:<span class=\"string\">\"bj\"</span>,</div></pre></td></tr></table></figure>\n</li>\n<li><p>搜索变量：<code>_baseUrl</code>，直到找到这样的一段代码</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">preLoaded:&#123;&#125;,<span class=\"attr\">Config</span>:&#123;<span class=\"attr\">_baseUrl</span>:x+<span class=\"string\">\"getmodules?v=1.3\"</span>,<span class=\"attr\">_timeout</span>:<span class=\"number\">5000</span>&#125;,</div></pre></td></tr></table></figure>\n<p> 同样，要去掉x，这个x也是前面这段代码中的x。同时，不仅要去掉x，更要把地址指向js目录。<br> 例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">preLoaded:&#123;&#125;,<span class=\"attr\">Config</span>:&#123;<span class=\"attr\">_baseUrl</span>:<span class=\"string\">\"js/\"</span>,<span class=\"attr\">_timeout</span>:<span class=\"number\">5000</span>&#125;,</div></pre></td></tr></table></figure>\n</li>\n<li><p>继续搜索下一个<code>_baseUrl</code>，得到下面的代码：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cP=cN.Config._baseUrl+<span class=\"string\">\"&amp;mod=\"</span>+cN.Module._arrMdls.join(<span class=\"string\">\",\"</span>);</div><div class=\"line\">    cy.request(cP);</div><div class=\"line\">    cN.Module._arrMdls.length=<span class=\"number\">0</span>;</div><div class=\"line\">    cN.delayFlag=<span class=\"literal\">false</span>;</div><div class=\"line\">&#125;,<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p> 直接修改<code>cP</code>变量（变量名与版本有关，可能不同），注意：这里把加载地址直接写死</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cP=cN.Config._baseUrl+<span class=\"string\">\"modules\"</span>;</div><div class=\"line\">cy.request(cP);</div></pre></td></tr></table></figure>\n<p> 这样，我们把动态模块加载改为了手动加载离线模块文件。<br> 访问这个地址 <a href=\"http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control,marker,poly\" target=\"_blank\" rel=\"external\">http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control,marker,poly</a> 我们就能拿到相应参数的模块源文件。<br> 新建文件<code>modules</code>，放在js文件夹里面即可。</p>\n</li>\n<li>关键的一步：搜索<code>getTilesUrl</code>直到找到这样的一段（变量名aU可能不一样）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">aU.getTilesUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cN, cQ</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cR = cN.x;</div><div class=\"line\">    <span class=\"keyword\">var</span> cO = cN.y;</div><div class=\"line\">    <span class=\"keyword\">var</span> T = <span class=\"string\">\"20150518\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> cP = <span class=\"string\">\"pl\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.map.highResolutionEnabled()) &#123;</div><div class=\"line\">        cP = <span class=\"string\">\"ph\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> cM = j[<span class=\"built_in\">Math</span>.abs(cR + cO) % j.length] + <span class=\"string\">\"?qt=tile&amp;x=\"</span></div><div class=\"line\">\t\t+ (cR + <span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/-/gi</span>, <span class=\"string\">\"M\"</span>) + <span class=\"string\">\"&amp;y=\"</span></div><div class=\"line\">\t\t+ (cO + <span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/-/gi</span>, <span class=\"string\">\"M\"</span>) + <span class=\"string\">\"&amp;z=\"</span> + cQ + <span class=\"string\">\"&amp;styles=\"</span> + cP</div><div class=\"line\">        + (a9.browser.ie == <span class=\"number\">6</span> ? <span class=\"string\">\"&amp;color_dep=32&amp;colors=50\"</span> : <span class=\"string\">\"\"</span>)</div><div class=\"line\">        + <span class=\"string\">\"&amp;udt=\"</span> + T;</div><div class=\"line\">    <span class=\"keyword\">return</span> cM.replace(<span class=\"regexp\">/-(\\d+)/gi</span>, <span class=\"string\">\"M$1\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">window</span>.BMAP_NORMAL_MAP = <span class=\"keyword\">new</span> cv(<span class=\"string\">\"\\u5730\\u56fe\"</span>, aU, &#123;</div><div class=\"line\">    <span class=\"attr\">tips</span> : <span class=\"string\">\"\\u663e\\u793a\\u666e\\u901a\\u5730\\u56fe\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>getTilesUrl</code>这个方法，这里就是返回瓦片未知的关键方法。两个参数中，第一个参数是{x，y}，第二个参数就是z，这样xyz就都有了。<br>直接把它计算出来的cM的结果重新计算一下，改成：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cM = <span class=\"string\">\"tiles/\"</span> + cQ + <span class=\"string\">\"/\"</span> + cR + <span class=\"string\">\"/\"</span> + cO + <span class=\"string\">\".jpg\"</span>;</div></pre></td></tr></table></figure></p>\n<p>.jpg后缀与你下载的瓦片图片格式有关。<br>这样就设置了<code>BMAP_NORMAL_MAP</code>地图类型的地图瓦片获取url，即为放在tiles目录下的瓦片资源。同理可以设置卫星<code>BMAP_SATELLITE_MAP</code>等地图类型的离线瓦片url。</p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>下载相关资源</p>\n<ol>\n<li>图片文件<br>像一些logo等图片资源。可通过chrome开发者工具查看缺少的图片文件，以及url。然后自行下载。将图片放在<code>images</code>文件夹中，并修改<code>bmap.css</code>中相应的url为本地路径。</li>\n<li><p>依赖模块API文件<br> 如果缺少某个依赖模块，则无法使用相应的API。<br> 在运行前期工作中的在线地图时，就可发现，依赖的库参数是什么。例如：以下的代码运行，所请求的依赖库参数是<a href=\"http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control\" target=\"_blank\" rel=\"external\">http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control</a></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"container\"</span>,&#123;<span class=\"attr\">mapType</span>:BMAP_NORMAL_MAP&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> BMap.Point(<span class=\"number\">116.404</span>, <span class=\"number\">39.915</span>);    <span class=\"comment\">// 创建点坐标</span></div><div class=\"line\">    map.centerAndZoom(point,<span class=\"number\">5</span>);                     <span class=\"comment\">// 初始化地图,设置中心点坐标和地图级别。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//map.addControl(new BMap.MapTypeControl());</span></div><div class=\"line\">    map.addControl(<span class=\"keyword\">new</span> BMap.NavigationControl());</div><div class=\"line\">    map.enableScrollWheelZoom();                  <span class=\"comment\">// 启用滚轮放大缩小。</span></div><div class=\"line\">    map.enableKeyboard();                         <span class=\"comment\">// 启用键盘操作。</span></div><div class=\"line\">    <span class=\"comment\">//map.setCurrentCity(\"北京\");          // 设置地图显示的城市 此项是必须设置的</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> 总共有哪些依赖模块可以去<code>apiv1.3.min.js</code>中搜索<code>Dependency</code></p>\n</li>\n<li>瓦片资源<br>可以选择 <code>全能电子地图下载器</code> 下载，其中<code>1.9.5</code>版本有破解，不过有些瓦片无法下载。或者选择自己拼凑瓦片，有教程获取瓦片url。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>离线API算是做好了，目录结构大致为：</p>\n<ul>\n<li>css<ul>\n<li>bmap.css</li>\n</ul>\n</li>\n<li>images</li>\n<li>js<ul>\n<li>apiv1.3.min.js</li>\n<li>modules</li>\n</ul>\n</li>\n<li>tiles</li>\n</ul>\n<p><a href=\"https://github.com/lakehumin/hawkui\" target=\"_blank\" rel=\"external\">HawkUI</a>项目中便用到了该离线API，文件在<code>public</code>目录下。</p>\n","excerpt":"","more":"<img src=\"/2016/12/08/BaiduMapAPI/baiduMap.jpg\" alt=\"配图木有名字\" title=\"配图木有名字\">\n<p>百度地图离线API制作，以API v1.3为例。更高版本请自行搜索。</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>访问 <a href=\"http://api.map.baidu.com/api?v=1.3\">http://api.map.baidu.com/api?v=1.3</a> 得到如下内容<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.wise=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">window</span>.netSpeed=<span class=\"number\">254</span>;</div><div class=\"line\">    <span class=\"built_in\">window</span>.netType=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">window</span>.BMap_loadScriptTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>).getTime();</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=1.3&amp;ak=&amp;services=&amp;t=20150527115231\"&gt;&lt;/script&gt;'</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://api.map.baidu.com/res/13/bmap.css\"/&gt;'</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这一步将获得一个js文件的位置和一个css文件的位置，然后分别下载下来，放在准备好的文件夹里面，我分别存储在/js和/css里面。js的路径后面有若干参数，不管，下载下来的文件重新命名就好，比如js文件命名为<code>apiv1.3.min.js</code></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>修改这个js中的代码。由于代码是压缩在一行上的，可通过网上的代码在线格式化。</p>\n<ol>\n<li><p>搜索变量：<code>imgPath</code>，直到找到一段代码</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x=m?<span class=\"string\">\"https://sapi.map.baidu.com/\"</span>:<span class=\"string\">\"http://api.map.baidu.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> cd=&#123;<span class=\"attr\">imgPath</span>:x+<span class=\"string\">\"images/\"</span>,<span class=\"attr\">cityNames</span>:&#123;<span class=\"string\">\"\\u5317\\u4eac\"</span>:<span class=\"string\">\"bj\"</span>,</div></pre></td></tr></table></figure>\n<p> 把<code>imgPath:x+&quot;images/&quot;</code>中的x去掉即可，这样就变成了跟网络地址无关的相对位置了。这里指出的<code>images</code>文件夹，是与将来的html文件夹平行的目录里面的。<br> 例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x=m?<span class=\"string\">\"https://sapi.map.baidu.com/\"</span>:<span class=\"string\">\"http://api.map.baidu.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> cd=&#123;<span class=\"attr\">imgPath</span>:<span class=\"string\">\"images/\"</span>,<span class=\"attr\">cityNames</span>:&#123;<span class=\"string\">\"\\u5317\\u4eac\"</span>:<span class=\"string\">\"bj\"</span>,</div></pre></td></tr></table></figure>\n</li>\n<li><p>搜索变量：<code>_baseUrl</code>，直到找到这样的一段代码</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">preLoaded:&#123;&#125;,<span class=\"attr\">Config</span>:&#123;<span class=\"attr\">_baseUrl</span>:x+<span class=\"string\">\"getmodules?v=1.3\"</span>,<span class=\"attr\">_timeout</span>:<span class=\"number\">5000</span>&#125;,</div></pre></td></tr></table></figure>\n<p> 同样，要去掉x，这个x也是前面这段代码中的x。同时，不仅要去掉x，更要把地址指向js目录。<br> 例如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">preLoaded:&#123;&#125;,<span class=\"attr\">Config</span>:&#123;<span class=\"attr\">_baseUrl</span>:<span class=\"string\">\"js/\"</span>,<span class=\"attr\">_timeout</span>:<span class=\"number\">5000</span>&#125;,</div></pre></td></tr></table></figure>\n</li>\n<li><p>继续搜索下一个<code>_baseUrl</code>，得到下面的代码：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cP=cN.Config._baseUrl+<span class=\"string\">\"&amp;mod=\"</span>+cN.Module._arrMdls.join(<span class=\"string\">\",\"</span>);</div><div class=\"line\">    cy.request(cP);</div><div class=\"line\">    cN.Module._arrMdls.length=<span class=\"number\">0</span>;</div><div class=\"line\">    cN.delayFlag=<span class=\"literal\">false</span>;</div><div class=\"line\">&#125;,<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p> 直接修改<code>cP</code>变量（变量名与版本有关，可能不同），注意：这里把加载地址直接写死</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cP=cN.Config._baseUrl+<span class=\"string\">\"modules\"</span>;</div><div class=\"line\">cy.request(cP);</div></pre></td></tr></table></figure>\n<p> 这样，我们把动态模块加载改为了手动加载离线模块文件。<br> 访问这个地址 <a href=\"http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control,marker,poly\">http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control,marker,poly</a> 我们就能拿到相应参数的模块源文件。<br> 新建文件<code>modules</code>，放在js文件夹里面即可。</p>\n</li>\n<li>关键的一步：搜索<code>getTilesUrl</code>直到找到这样的一段（变量名aU可能不一样）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">aU.getTilesUrl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cN, cQ</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cR = cN.x;</div><div class=\"line\">    <span class=\"keyword\">var</span> cO = cN.y;</div><div class=\"line\">    <span class=\"keyword\">var</span> T = <span class=\"string\">\"20150518\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> cP = <span class=\"string\">\"pl\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.map.highResolutionEnabled()) &#123;</div><div class=\"line\">        cP = <span class=\"string\">\"ph\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> cM = j[<span class=\"built_in\">Math</span>.abs(cR + cO) % j.length] + <span class=\"string\">\"?qt=tile&amp;x=\"</span></div><div class=\"line\">\t\t+ (cR + <span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/-/gi</span>, <span class=\"string\">\"M\"</span>) + <span class=\"string\">\"&amp;y=\"</span></div><div class=\"line\">\t\t+ (cO + <span class=\"string\">\"\"</span>).replace(<span class=\"regexp\">/-/gi</span>, <span class=\"string\">\"M\"</span>) + <span class=\"string\">\"&amp;z=\"</span> + cQ + <span class=\"string\">\"&amp;styles=\"</span> + cP</div><div class=\"line\">        + (a9.browser.ie == <span class=\"number\">6</span> ? <span class=\"string\">\"&amp;color_dep=32&amp;colors=50\"</span> : <span class=\"string\">\"\"</span>)</div><div class=\"line\">        + <span class=\"string\">\"&amp;udt=\"</span> + T;</div><div class=\"line\">    <span class=\"keyword\">return</span> cM.replace(<span class=\"regexp\">/-(\\d+)/gi</span>, <span class=\"string\">\"M$1\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">window</span>.BMAP_NORMAL_MAP = <span class=\"keyword\">new</span> cv(<span class=\"string\">\"\\u5730\\u56fe\"</span>, aU, &#123;</div><div class=\"line\">    <span class=\"attr\">tips</span> : <span class=\"string\">\"\\u663e\\u793a\\u666e\\u901a\\u5730\\u56fe\"</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>getTilesUrl</code>这个方法，这里就是返回瓦片未知的关键方法。两个参数中，第一个参数是{x，y}，第二个参数就是z，这样xyz就都有了。<br>直接把它计算出来的cM的结果重新计算一下，改成：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cM = <span class=\"string\">\"tiles/\"</span> + cQ + <span class=\"string\">\"/\"</span> + cR + <span class=\"string\">\"/\"</span> + cO + <span class=\"string\">\".jpg\"</span>;</div></pre></td></tr></table></figure></p>\n<p>.jpg后缀与你下载的瓦片图片格式有关。<br>这样就设置了<code>BMAP_NORMAL_MAP</code>地图类型的地图瓦片获取url，即为放在tiles目录下的瓦片资源。同理可以设置卫星<code>BMAP_SATELLITE_MAP</code>等地图类型的离线瓦片url。</p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>下载相关资源</p>\n<ol>\n<li>图片文件<br>像一些logo等图片资源。可通过chrome开发者工具查看缺少的图片文件，以及url。然后自行下载。将图片放在<code>images</code>文件夹中，并修改<code>bmap.css</code>中相应的url为本地路径。</li>\n<li><p>依赖模块API文件<br> 如果缺少某个依赖模块，则无法使用相应的API。<br> 在运行前期工作中的在线地图时，就可发现，依赖的库参数是什么。例如：以下的代码运行，所请求的依赖库参数是<a href=\"http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control\">http://api.map.baidu.com/getmodules?v=1.3&amp;mod=map,oppc,tile,control</a></p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"container\"</span>,&#123;<span class=\"attr\">mapType</span>:BMAP_NORMAL_MAP&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> BMap.Point(<span class=\"number\">116.404</span>, <span class=\"number\">39.915</span>);    <span class=\"comment\">// 创建点坐标</span></div><div class=\"line\">    map.centerAndZoom(point,<span class=\"number\">5</span>);                     <span class=\"comment\">// 初始化地图,设置中心点坐标和地图级别。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//map.addControl(new BMap.MapTypeControl());</span></div><div class=\"line\">    map.addControl(<span class=\"keyword\">new</span> BMap.NavigationControl());</div><div class=\"line\">    map.enableScrollWheelZoom();                  <span class=\"comment\">// 启用滚轮放大缩小。</span></div><div class=\"line\">    map.enableKeyboard();                         <span class=\"comment\">// 启用键盘操作。</span></div><div class=\"line\">    <span class=\"comment\">//map.setCurrentCity(\"北京\");          // 设置地图显示的城市 此项是必须设置的</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> 总共有哪些依赖模块可以去<code>apiv1.3.min.js</code>中搜索<code>Dependency</code></p>\n</li>\n<li>瓦片资源<br>可以选择 <code>全能电子地图下载器</code> 下载，其中<code>1.9.5</code>版本有破解，不过有些瓦片无法下载。或者选择自己拼凑瓦片，有教程获取瓦片url。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>离线API算是做好了，目录结构大致为：</p>\n<ul>\n<li>css<ul>\n<li>bmap.css</li>\n</ul>\n</li>\n<li>images</li>\n<li>js<ul>\n<li>apiv1.3.min.js</li>\n<li>modules</li>\n</ul>\n</li>\n<li>tiles</li>\n</ul>\n<p><a href=\"https://github.com/lakehumin/hawkui\">HawkUI</a>项目中便用到了该离线API，文件在<code>public</code>目录下。</p>\n"}],"PostAsset":[{"_id":"source/_posts/curl-google-com/google.gif","slug":"google.gif","post":"cj5pb42s10000cgom0op6to75","modified":1,"renderable":0},{"_id":"source/_posts/BaiduMapAPI/baiduMap.jpg","slug":"baiduMap.jpg","post":"cj5pb42tc0006cgomyzalfget","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj5pb42s10000cgom0op6to75","category_id":"cj5pb42s10001cgomg65wzr2n","_id":"cj5pb42sh0004cgom80ibfu7q"},{"post_id":"cj5pb42tc0006cgomyzalfget","category_id":"cj5pb42tc0007cgomy81m6zpi","_id":"cj5pb42tc000acgomtu587qr8"}],"PostTag":[{"post_id":"cj5pb42s10000cgom0op6to75","tag_id":"cj5pb42sh0002cgomj9s80o0k","_id":"cj5pb42sh0003cgom77cy0qxp"},{"post_id":"cj5pb42tc0006cgomyzalfget","tag_id":"cj5pb42tc0008cgom6fl10cn4","_id":"cj5pb42tc000bcgomo7l0ma5l"},{"post_id":"cj5pb42tc0006cgomyzalfget","tag_id":"cj5pb42tc0009cgomxayu68i9","_id":"cj5pb42tc000ccgomnnes7okw"}],"Tag":[{"name":"WEB","_id":"cj5pb42sh0002cgomj9s80o0k"},{"name":"百度地图","_id":"cj5pb42tc0008cgom6fl10cn4"},{"name":"工具","_id":"cj5pb42tc0009cgomxayu68i9"}]}}